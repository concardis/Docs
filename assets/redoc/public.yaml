swagger: '2.0'
info:
  version: v1
  title: Payengine Public
  description: |
    Documentation for Payengine API v1.0

    # Authentication

    Authorization of requests is done via HTTP basic access authentication. The following syntax must be used in the 'Authorization' header :

    ## Endpoints

    <table>
      <tr>
        <td><b>Sandbox API</b></td>
        <td>https://apitest.payengine.de/v1</td>
      </tr>
      <tr>
        <td><b>Live API</b></td>
        <td>https://api.payengine.de/v1</td>
      </tr>
    </table>

  x-logo:
    url: 'img/Concardis_Nets_Group_transperent.png'
    backgroundColor: '#fafafa'
    altText: Concardis Logo
servers:
- url: https://apitest.payengine.de/v1
  description: Sandbox
- url: https://api.payengine.de/v1
  description: Live
securityDefinitions:
  Basic:
    type: http
    scheme: Basic
    name: Authorization
    in: header
    description: |
      Authorization: Basic base64(merchantId:apiKey)

      Example:<br/>
        merchantId= merchant_bzo3pt5dix<br/>
        apiKey= YGc7oJsaAIetzdxD<br/>
        base64(merchantId:apiKey)= bWVyY2hhbnRfYnpvM3B0NWRpeDpZR2M3b0pzYUFJZXR6ZHhE<br/>
        This will result in the following basic access authentication header<br/>
        Authorization: Basic bWVyY2hhbnRfYnpvM3B0NWRpeDpZR2M3b0pzYUFJZXR6ZHhE
  Bearer:
    type: http
    name: Authorization
    in: header
    scheme: Bearer
    description: |
      Authorization: Bearer merchantId

      Example:<br/>
      Authorization: Bearer merchant-111-111-111
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Manage tokenization
  - name: Manage 3DS authentication
  - name: Manage orders
  - name: Manage customers
  - name: Manage installments
  - name: Manage settlements
  - name: Manage reports
  - name: Manage batches
  - name: Health check
paths:
  /payment-instruments:
    post:
      security:
        - Bearer: []
      summary: |
        Tokenize payment instrument
      description: >
        Endpoint to create a new payment instrument.

        The service will store the payment credentials and return a paymentInstrumentId which can be used as a token for referencing the credentials for any payment operation.


        The storage complies with the latest PCI standards and regulations.


        A payment instrument can be created either explicitly (e.g. for credit card & sepa) or implicitly as part of a preauth or debit transaction.

        Payment instruments can be used for recurring payments, if the flag "recurring" is set to true.
      tags:
        - Manage tokenization
      operationId: createPaymentInstrument
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body to create a new paymentinstrument.
          schema:
            $ref: '#/definitions/PaymentInstrumentRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PaymentInstrumentResponse'
        '400':
          description: Bad request based on invalid input.
          schema:
            $ref: '#/definitions/PaymentInstrumentsPostBadRequest'
    get:
      security:
        - basicAuth: []
      summary: Get list of payment instruments
      description: |
        Endpoint to receive a list of available paymentinstruments.


        The following parameters can be used as filter.
        - paymentInstrumentId
        - merchantPaymentInstrumentId
        - type
        - origin
        - recurring
        - createdAt
        - modifiedAt
      tags:
        - Manage tokenization
      operationId: PaymentInstruments
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PaymentInstrumentList'
  '/payment-instruments/{paymentInstrumentId}':
    get:
      security:
        - basicAuth: []
      summary: |
        Get payment instrument
      description: >
        Endpoint to receive a specific payment instrument referencing the paymentInstrumentId.
      tags:
        - Manage tokenization
      operationId: getPaymentInstrument
      produces:
        - application/json
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PaymentInstrumentResponse'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/PaymentInstrumentsGetNotFound'
    patch:
      security:
        - Bearer: []
      summary: |
        Update payment instrument
      description: >
        Endpoint to update an existing payment instrument referencing the paymentInstrumentId.


        Can be used to refresh the verification code (CVC) for card payment instruments, e.g. in case of a recurring transaction the shopper can be forced to re-enter the CVC.
      tags:
        - Manage tokenization
      operationId: updatePaymentInstrument
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
        - name: body
          in: body
          required: true
          description: Request object containing some or all of the updateable fields applicable for the type of the specified payment instrument. (CC or SEPA)
          schema:
            $ref: '#/definitions/PaymentInstrumentUpdateRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PaymentInstrumentResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/PaymentInstrumentsPatchBadRequest'
    delete:
      security:
        - basicAuth: []
      summary: Delete payment instrument
      description: >
        Endpoint to delete an existing payment instrument referencing the paymentInstrumentId.
      tags:
        - Manage tokenization
      operationId: DeletePaymentInstrumentByPaymentInstrumentId
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
      responses:
        '204':
          description: Successful response
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/PaymentInstrumentsGetNotFound'
  '/payment-instruments/{paymentInstrumentId}/card-check':
    post:
      security:
        - basicAuth: []
      summary: Initiate cardcheck
      description: |
        Service to initiate a card check which will results in a 0,00 EUR authorization.

        The card check authorization can be used as an initial authorization containing the 3DS information in case the merchant only stores the payment credentials and at this point no real payment should be initiated.
      tags:
        - Manage tokenization
      operationId: createCardcheckForPaymentInstrument
      produces:
        - application/json
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
        - name: body
          in: body
          required: true
          description: Request body to create a cardcheck
          schema:
            $ref: '#/definitions/CardcheckRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/CardcheckResponse'
  '/payment-instruments/{paymentInstrumentId}/3ds-version':
    post:
      security:
        - basicAuth: []
      summary: |
        Create 3DS version info
      description: >
        Endpoint to check the supported 3DS version and receive additional 3DS related information.
      tags:
        - Manage 3DS authentication
      operationId: getThreeDsVersionForPaymentInstrument
      produces:
        - application/json
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/ThreeDsVersionResponse'
        '400':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/ThreeDsVersionBadRequest'
  /browser-info:
    post:
      security:
        - Bearer: []
      summary: |
        Store browser information
      description: Endpoint to store browser session information, the browser session information is usually collected via javascript.
      tags:
        - Manage 3DS authentication
      operationId: createBrowserInfo
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body to create a new paymentinstrument.
          schema:
            $ref: '#/definitions/BrowserInfo'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/BrowserInfoResponse'
  '/payment-instruments/{paymentInstrumentId}/3ds-version/{threeDsVersionId}/3ds-authentication':
    post:
      security:
        - basicAuth: []
      summary: |
        Create 3DS authentication
      description: >
        Endpoint to create a standalone 3DS authentication for the given payment-instrument based on the 3DS version result
      tags:
        - Manage 3DS authentication
      operationId: createAuthenticationForPaymentInstrument
      produces:
        - application/json
      parameters:
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
        - name: threeDsVersionId
          in: path
          required: true
          type: string
          description: ID of the specific 3DS version result.
        - name: body
          in: body
          required: true
          description: Request body to create an authentication
          schema:
            $ref: '#/definitions/AuthenticationRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/AuthenticationResponse'
  /creditcard/3ds-authentication/{threeDsAuthenticationId}:
    get:
      security:
        - basicAuth: []
      summary: Get 3DS authentication result
      description: |
        Endpoint to fetch the result details of a 3DS authentication.
      tags:
        - Manage 3DS authentication
      operationId: getThreeDsAuthentication
      produces:
        - application/json
      parameters:
        - name: threeDsAuthenticationId
          in: path
          required: true
          type: string
          description: ID of the specific 3DS authentication.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/AuthenticationResponse'
  /orders:
    post:
      security:
        - basicAuth: []
      summary: Create order intent
      description: >
        Endpoint to create an order intent.


        This service will create a new order incl. all order details with status CREATED and returns a corresponding orderId.


        The order intent is required for Payengine widget solutions which need an orderId as an input in order to execute an order at the end of the process.
      tags:
        - Manage orders
      operationId: getOrders
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body to create a order intent.
          schema:
            $ref: '#/definitions/OrderCreateRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/OrderResponse'
    get:
      security:
        - basicAuth: []
      summary: Get list of orders
      description: |
        Endpoint to receive a list of available orders.


        The following parameters can be used as filter.
        - terms
        - privacy
        - orderId
        - merchantOrderId
        - paymentProviderTransactionId
        - initialAmount
        - currency
        - customerId
        - ipAddress
        - status
        - channel
        - source
        - product
        - settled
        - settlementDate
        - createdAt
        - modifiedAt
        - lastOpereation
        - email


        The following parameters can be used as a range filter.


        Dates:
        - terms
        - privacy
        - settlementDate
        - createdAt
        - modifiedAt

        Numbers:
        - initialAmount
      tags:
        - Manage orders
      operationId: Orders
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/OrderList'
  '/orders/{orderId}':
    get:
      security:
        - basicAuth: []
      summary: Get order
      description: >
        Endpoint to receive a specific order referencing the orderId.


        The returned order object includes all details and transactions of the whole lifecycle of the order.
      tags:
        - Manage orders
      operationId: getOrder
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the specific order.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/OrderList'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersGetNotFound'
    patch:
      security:
        - basicAuth: []
      summary: Update order
      description: |
        Endpoint to update an order intent referencing the orderId.


        This service can be used for updating order details as long as the order is still in status CREATED.
      tags:
        - Manage orders
      operationId: OrdersByOrderId1
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the specific order.
        - name: body
          in: body
          required: true
          description: Request body for updating an order.
          schema:
            $ref: '#/definitions/OrderUpdateRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/OrderResponse'
  /orders/preauth:
    post:
      security:
        - basicAuth: []
      summary: Create preauth transaction
      description: >
        Endpoint to create a preauth transaction.

        A preauth transaction only authorizes a payment and for certain methods also reserves the authorized amount. However no cash flow will be triggered as long as no corresponding capture transaction is initiated at a later stage.


        There are 2 workflows to process a preauth: ASYNC and SYNC.


        With SYNC payment methods the transaction will directly result in a OK/SUCCESS or a negative status.
        With ASYNC payment methods the transaction will result in a PENDING or FAILURE/DECLINED/ABORTED status.


        The integrating system needs to redirect the shopper to the redirectUrl
        After the shopper completes the payment action the transaction status will change accordingly and the integrator can query the updated status.
      tags:
        - Manage orders
      operationId: createPreauthOrder
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body for creating a preauth.
          schema:
            $ref: '#/definitions/OrderOpenRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/OrderResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersPreauthPostBadRequest'
  /orders/debit:
    post:
      security:
        - basicAuth: []
      summary: >
        Create debit transaction
      description: >
        Endpoint to create a debit transaction.


        The debit transaction authorizes the payment and triggers the cash flow as the money will be debited from the end customer account.


        No further capture transaction is required anymore afterwards.


        There are 2 workflows to process a debit: ASYNC and SYNC.


        With SYNC payment methods the transaction will directly result in a OK/SUCCESS or a negative status.


        With ASYNC payment methods the transaction will result in a PENDING or FAILURE/DECLINED/ABORTED status.


        If the status of the transaction is in PENDING the response will contain a redirectUrl.


        The integrating system needs to redirect the shopper to the redirectUrl.


        After the shopper completes the payment action the transaction status will change accordingly and the integrator can query the updated status.
      tags:
        - Manage orders
      operationId: createDebitOrder
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body for creating a debit.
          schema:
            $ref: '#/definitions/OrderOpenRequest'
      responses:
        '200':
          description: successful response.
          schema:
            $ref: '#/definitions/OrderResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersDebitPostBadRequest'
  /orders/credit:
    post:
      security:
        - basicAuth: []
      summary: Create credit transaction
      description: >
        Endpoint to create a credit transaction.

        Initialise a transaction and book an amount.
        The creditor is the customer and the debitor is the merchant.

        Credit transaction is always processed synchronously, 'channel' has to be MOTO.

      tags:
        - Manage orders
      operationId: createCreditOrder
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body for creating a credit transaction.
          schema:
            $ref: '#/definitions/OrderCreditRequest'
      responses:
        '200':
          description: successful response.
          schema:
            $ref: '#/definitions/OrderResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersCreditPostBadRequest'
  '/orders/{orderId}/transactions/{transactionId}/cancel':
    post:
      security:
        - basicAuth: []
      summary: Create cancel transaction
      description: >
        Endpoint to create a cancelation a preauth transaction referencing the corresponding orderId and transactionId.


        A cancel transaction can only be applied to a non expired preauth transaction that is in status SUCCESS.

        Partial cancelations are supported but the initialAmount cannot be higher than the amount that was authorized
      tags:
        - Manage orders
      operationId: createCancel
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
        - name: transactionId
          in: path
          required: true
          type: string
          description: 'ID of the affected transaction. note: it must be a preauth.'
        - name: body
          in: body
          required: true
          description: Request body for creating a cancel
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TransactionResponseParent'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsCancelPostBadRequest'
  '/orders/{orderId}/transactions/{transactionId}/capture':
    post:
      security:
        - basicAuth: []
      summary: Create capture transaction
      description: >
        Endpoint to capture a preauth transaction referencing the corresponding orderId and transactionId.


        A capture transaction can only be applied to a non expired preauth transaction that is in status SUCCESS.

        Partial captures are supported but the initialAmount cannot be higher than the amount that was authorized.
      tags:
        - Manage orders
      operationId: createCapture
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
        - name: transactionId
          in: path
          required: true
          type: string
          description: 'ID of the affected transaction. note: it must be a preauth.'
        - name: body
          in: body
          required: true
          description: Request body for creating a capture.
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/CaptureResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsCapturePostBadRequest'
  '/orders/{orderId}/transactions/{transactionId}/refund':
    post:
      security:
        - basicAuth: []
      summary: Create refund transaction
      description: >
        Endpoint to refund a capture transaction referencing the corresponding orderId and transactionId.


        A refund transaction can only be applied to a capture transaction that is in status SUCCESS.

        Partial refunds are supported but the initialAmount cannot be higher than the amount that was captured.


        In case refunds for sepa/sofort/prepayment are executed using the online bank transfer feature
        the refund will result in the status PENDING.


        The transaction response will contain a challenge element with the TAN instructions.


        The TAN needs to be transmitted in subsequent request. See "PATCH /orders/{orderId}/transactions/{transactionId}"
      tags:
        - Manage orders
      operationId: createRefund
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
        - name: transactionId
          in: path
          required: true
          type: string
          description: >-
            ID of the affected transaction. note: it must be a capture or a
            debit.
        - name: body
          in: body
          required: true
          description: Request body for creating a refund.
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TransactionResponseParent'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsRefundPostBadRequest'
  '/orders/{orderId}/transactions/{transactionId}':
    get:
      security:
        - basicAuth: []
      description: |
        Endpoint to receive a specific transaction referencing the orderId and transactionId.
      summary: Get transaction
      tags:
        - Manage orders
      operationId: getTransaction
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
        - name: transactionId
          in: path
          required: true
          type: string
          description: ID of the specific transaction.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TransactionResponseParent'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsGetNotFound'
    patch:
      security:
        - basicAuth: []
      summary: Update order transaction
      description: >
        Endpoint to update a specific transaction referencing the orderId and transactionId.


        The service can be used for updating preauth transactions for ratepay-invoice, ratepay-directdebit or ratepay-installment that have not been captured yet.


        The service can also be used for updating the TAN for refund transactions using the online bank transfer feature for sepa/sofort/prepayment that are in status PENDING.
      tags:
        - Manage orders
      operationId: updateTransaction
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
        - name: transactionId
          in: path
          required: true
          type: string
          description: ID of the specific transaction.
        - name: body
          in: body
          required: true
          description: Request body for updating a transaction
          schema:
            $ref: '#/definitions/TransactionRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TransactionResponseParent'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsPatchBadRequest'
  '/orders/{orderId}/transactions':
    get:
      security:
        - basicAuth: []
      summary: Get list of order transactions
      description: |
        Endpoint to receive a list of all available transactions of an orders referencing the orderId.
      tags:
        - Manage orders
      operationId: getTransactions
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: ID of the affected order.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TransactionList'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/OrdersTransactionsGetAllNotFound'
  /customers:
    post:
      security:
        - basicAuth: []
      summary: Create customer
      description: >
        Endpoint to create a new customer returning a unique customerId.


        A customer object acts as a container for customer specific personas and addresses.


        If the email address of the given customer is already known to the platform the service will respond with HTTP status 200 OK.
        For every newly created customer service will respond with the HTTP status 201 CREATED
      tags:
        - Manage customers
      operationId: createCustomer
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: Request body to create a new customer.
          schema:
            $ref: '#/definitions/CustomerRequest'
      responses:
        '201':
          description: Successful response.
          schema:
            $ref: '#/definitions/CustomerResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPostBadRequest'
    get:
      security:
        - basicAuth: []
      summary: Get list of customers
      description: |
        Endpoint to receive a list of available customers.


        The following parameters can be used as filter.
        - customerId
        - email
        - merchantCustomerId
        - createdAt
        - modifiedAt


        The following parameters can be used as a range filter.
        - createdAt
        - modifiedAt
      tags:
        - Manage customers
      operationId: getCustomers
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/CustomerList'
  '/customers/{customerId}':
    get:
      security:
        - basicAuth: []
      summary: Get customer
      description: |
        Endpoint to receive a customer referencing the customerId.


        The service will also return associated persona and address data
      tags:
        - Manage customers
      operationId: getCustomer
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/CustomerResponse'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersGetNotFound'
    patch:
      security:
        - basicAuth: []
      summary: Update customer
      description: |
        Endpoint to update the merchantCustomerId of a specific customer referencing the customerId
      tags:
        - Manage customers
      operationId: updateCustomer
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: body
          in: body
          required: true
          description: Request body for updating a customer.
          schema:
            $ref: '#/definitions/CustomerUpdateRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/CustomerResponse'
        '400':
          description: Bad value caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPatchBadRequest'
    delete:
      security:
        - basicAuth: []
      summary: Delete customer
      description: |
        Endpoint to delete a specific customer referencing the customerId.
      tags:
        - Manage customers
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
      responses:
        '204':
          description: Successful response.
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersGetNotFound'
  '/customers/{customerId}/personas/{personaId}':
    get:
      security:
        - basicAuth: []
      summary: Get customer persona
      description: |
        Endpoint to receive a specific persona data referencing the corresponding personaId and customerId.
      tags:
        - Manage customers
      operationId: getPersona
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: personaId
          in: path
          required: true
          type: string
          description: ID of the specific persona.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PersonaResponse'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPersonasGetNotFound'
  '/customers/{customerId}/personas':
    get:
      security:
        - basicAuth: []
      summary: Get list of customer persona
      description: |
        Endpoint to receive a list of available personas for a specific customer referencing the customerId.
      tags:
        - Manage customers
      operationId: getPersonas
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PersonaList'
        '400':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPersonasGetAllBadRequest'
    post:
      security:
        - basicAuth: []
      summary: Assign persona to customer
      description: >
        Endpoint to create a persona object and assign it to a specific customer referencing the customerId.


        Personas contain person related attributes of a customer which are needed to process some payment methods.
      tags:
        - Manage customers
      operationId: createPersona
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: body
          in: body
          required: true
          description: Request body to create a new persona.
          schema:
            $ref: '#/definitions/PersonaRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PersonaResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPersonasPostBadRequest'
  '/customers/{customerId}/addresses/{addressId}':
    get:
      security:
        - basicAuth: []
      summary: Get customer address
      description: |
        Endpoint to receive a specific address data referencing the corresponding personaId and customerId.
      tags:
        - Manage customers
      operationId: getAddress
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: addressId
          in: path
          required: true
          type: string
          description: ID of the specific address.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/AddressResponse'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersAddressesGetNotFound'
  '/customers/{customerId}/addresses':
    get:
      security:
        - basicAuth: []
      summary: Get list of customer addresses
      description: |
        Endpoint to receive a list of available addresses for a specific customer referencing the customerId.
      tags:
        - Manage customers
      operationId: getAddresses
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/AddressList'
        '400':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersAddressesGetAllBadRequest'
    post:
      security:
        - basicAuth: []
      summary: Assign address to customer
      description: >
        Endpoint to create a new address for a specific customer.


        Addresses containing address related attributes of a customer which are
        needed to process some payment methods.
      tags:
        - Manage customers
      operationId: createAddress
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: body
          in: body
          required: true
          description: Request body to create a new address.
          schema:
            $ref: '#/definitions/AddressRequest'
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/AddressResponse'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersAddressesPostBadRequest'
  '/customers/{customerId}/payment-instruments':
    post:
      security:
        - basicAuth: []
      summary: Assign payment instrument to customer
      description: |
        Endpoint to assign a payment instrument to a specific customer referencing the customerId.
      tags:
        - Manage customers
      operationId: assignPaymentInstrumentToCustomer
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: body
          in: body
          required: true
          description: Request body for creating a new paymentinstrument.
          schema:
            $ref: '#/definitions/CustomerPaymentInstrumentRelation'
      responses:
        '204':
          description: Successful response.
        '400':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPaymentInstrumentsPostBadRequest'
    get:
      security:
        - basicAuth: []
      summary: Get list of customer payment instruments
      description: |
        Endpoint to receive a list of available payment instruments for a specific customer referencing the customerId.
      tags:
        - Manage customers
      operationId: getPaymentInstruments
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/PaymentInstrumentList'
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPaymentInstrumentsGetBadRequest'
  '/customers/{customerId}/payment-instruments/{paymentInstrumentId}':
    delete:
      security:
        - basicAuth: []
      summary: Delete payment instrument from customer
      description: |
        Endpoint to delete a specific payment instrument from a customer.
      tags:
        - Manage customers
      operationId: deletePaymentInstrument
      produces:
        - application/json
      parameters:
        - name: customerId
          in: path
          required: true
          type: string
          description: ID of the specific customer.
        - name: paymentInstrumentId
          in: path
          required: true
          type: string
          description: ID of the specific paymentinstrument.
      responses:
        '204':
          description: Successful response.
        '400':
          description: Bad request caused by invalid input.
          schema:
            $ref: '#/definitions/CustomersPaymentInstrumentsDeleteBadRequest'


  /installment/config:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to query the supported installment settings.


        This service will return the minimum rate and the minimum & maximum monthly term of an installment that are supported based on the merchant configuration.


        A merchant can use these parameters as restrictions in case an input form is displayed directly to their customers chosing the available installment options.



        This service is not needed in case the Payengine widget is used as this will execute the services automatically in the background.
      summary: Get supported installment settings
      tags:
        - Manage installments
      operationId: getInstallmentConfig
      produces:
        - application/json
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/InstallmentConfigResponse'
  /installment/calculation/rate:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to receive an installment plan based on the total amount and a selected rate for each installment payment.
      summary: Get installment rate
      tags:
        - Manage installments
      operationId: getInstallmentCalculationRate
      produces:
        - application/json
      parameters:
        - name: amount
          in: query
          required: true
          type: integer
          description: Amount to be financed
        - name: calculationRate
          in: query
          required: true
          type: integer
          description: Contains the rate information
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/InstallmentCalculationRateResponse'
  /installment/calculation/time:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to receive an installment plan based on the total amount and a selected term of the installment payment (in months).
      summary: Get installment plan
      tags:
        - Manage installments
      operationId: getInstallmentCalculationTime
      produces:
        - application/json
      parameters:
        - name: amount
          in: query
          required: true
          type: integer
          description: Amount to be financed
        - name: calculationTime
          in: query
          required: true
          type: integer
          description: Contains the duration information of the installment plan
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/InstallmentCalculationTimeResponse'
  /settlements:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to receive a list of available settlement files.

        The following parameters can be used as filter.
        - settlementId
        - receivedAt
        - product
        - downloaded
        - receivedAtAfter
        - receivedAtBefore
        - fileFormat
        - excludeFiles
        - settlementType

        The following parameter names can be used for ordering the results.
         - settlementId
         - product
         - downloaded
         - receivedAt
         - fileFormat
         - settlementType
      summary: |
        Get list of settlement files
      tags:
        - Manage settlements
      operationId: getSettlements
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/SettlementsList'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/SettlementsNotFound'
  /settlements/download:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to download specific settlement files.


        The files that should be downloaded have to be referenced via the settlementId in the body of the service request.


        In case there is a list of settlementIds the files will be returned as a zip file.


        In case only one settlementId is referenced the plain file will be returned.
      summary: Download settlement file
      tags:
        - Manage settlements
      operationId: downloadSettlements
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          type: array
          items:
            type: string
          description: List of settlement ids
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/SettlementResponse'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/SettlementsNotFound'
  /report/transaction:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to receive a list of available transaction report files.

        The following parameters can be used as filter.
        - createdAt
        - createdAtAfter
        - createdAtBefore
        - reportDate
        - reportDateAfter
        - reportDateBefore
        - txReportType
        - txReportFormat

        The following parameter names can be used for ordering the results.
        - createdAt

      summary: |
        Get list of transaction report files
      tags:
        - Manage reports
      operationId: getTransactionReports
      produces:
        - application/json
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/TxReportList'
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/TxReportNotFound'
  /report/transaction/download:
    get:
      security:
        - Bearer: []
      description: |
        Endpoint to download specific transactions report files.


        The files that should be downloaded have to be referenced via the transactionReportId in the body of the service request.


        In case there is a list of transactionReportId the files will be returned as a zip file.


        In case only one transactionReportId is referenced the plain file will be returned.
      summary: Download transaction report file
      tags:
        - Manage reports
      operationId: downloadTransactionReports
      produces:
        - text/csv
        - application/vnd.ms-excel
        - application/zip
      parameters:
        - name: id
          in: query
          type: array
          items:
            type: string
          description: List of transaction report ids
      responses:
        '200':
          description: Successful response.
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/TxReportNotFound'
  /batch/upload:
    post:
      security:
        - basicAuth: []
      summary: Upload batch file
      description: |
        Endpoint to upload a csv batch file.
      tags:
        - Manage batches
      operationId: uploadBatch
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: uploadedFile
          in: formData
          type: file
          description: File with batch transactions
      responses:
        '200':
          description: Successful response.
          schema:
            $ref: '#/definitions/BatchResponse'
        '400':
          description: Bad Request.
          schema:
            $ref: '#/definitions/BatchUploadBadFile'
  /batch:
    get:
      security:
        - basicAuth: []
      description: |
        Endpoint to receive a list of uploaded batch files.

        The following parameters can be used as filter.
        - page
        - size
        - createdAtAfter
        - createdAtBefore
        - batchRequestFileName
        - batchSequence
        - generatedAtAfter
        - generatedAtBefore

        The following parameter names can be used for ordering the results.
        - createdAt
        - batchRequestFileName
        - batchSequence
        - generatedAt
      summary: Get list of batch files
      tags:
        - Manage batches
      operationId: getBatches
      produces:
        - application/json
      responses:
        '200':
          description: List of transactions.
          schema:
            type: "array"
            items:
              $ref: "#/definitions/BatchResponse"
  /batch/{batchId}:
    get:
      security:
        - basicAuth: []
      description: |
        Endpoint to receive the meta data of a specific batch file referencing the batchId
      summary: Get specific batch file details
      tags:
        - Manage batches
      operationId: getBatch
      produces:
        - application/json
      parameters:
        - name: batchId
          in: path
          required: true
          type: string
          description: Specific batch transaction
      responses:
        '200':
          description: Successful response.
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/BatchNotFound'
  /batch/{batchId}/response/download:
    get:
      security:
        - basicAuth: []
      summary: Download batch response file
      description: |
        Endpoint to download the response file for a specific batch file that was uploaded.


        The batchId of the corresponding batch file that was uploaded has to be provided as an input parameter.
      tags:
        - Manage batches
      operationId: downloadBatch
      produces:
        - text/csv
      parameters:
        - name: batchId
          in: path
          required: true
          type: string
          description: List of csv generated file when the uploaded file is successfully parsed.
      responses:
        '200':
          description: Successful response.
        '404':
          description: Not found caused by invalid input.
          schema:
            $ref: '#/definitions/BatchResponseNotFound'
  /health:
    get:
      summary: Get system health
      description: >
        Endpoint to check the health status of the Payengine API.
      tags:
        - Health check
      operationId: getHealth
      produces:
        - application/json
      responses:
        '200':
          description: The system health is successfully measured.
          schema:
            $ref: '#/definitions/HealthResponse'
        '403':
          description: The health endpoint is disabled via configuration.
definitions:
  HealthResponse:
    title: HealthResponse
    type: object
    properties:
      systemHealth:
        type: string
        description: The aggregated system health
        enum:
          - GOOD
          - BAD
  GenderBaseTypeEnum:
    title: GenderBaseTypeEnum
    type: string
    description: The gender of the persona.
    enum:
      - MALE
      - FEMALE
  ChannelsBaseTypeEnum:
    title: ChannelsBaseTypeEnum
    type: string
    description: >-
      The channel determine the kind of origin for this order. (optional,
      mandatory for creditcard, ratepay-invoice, ratepay-directdebit and
      ratepay-installment)
    enum:
      - MOTO
      - ECOM
  ProductsBaseTypeEnum:
    title: ProductsBaseTypeEnum
    type: string
    description: The product used to create this order. (mandatory)
    enum:
      - creditcard
      - paypal
      - paydirekt
      - ratepay-invoice
      - ratepay-directdebit
      - ratepay-installment
      - sepa
      - sofort
      - klarna-pay-now
      - klarna-pay-later
      - klarna-slice-it
      - prepayment
      - giropay
      - eps
      - ideal
      - alipay
      - bancontact
      - wechat-pay
  Item:
    title: Item
    type: object
    properties:
      name:
        description: The articles name used in your shop.
        type: string
        minLength: 1
        maxLength: 128
      articleNumber:
        description: The articles number used in your shop.
        type: string
        minLength: 1
        maxLength: 255
      totalPrice:
        description: >-
          The total price for this item excluding taxes. The total amount should
          be given as smallest currency unit.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      totalPriceWithTax:
        description: >-
          The total price for this item including taxes. The total amount should
          be given as smallest currency unit. If the item is of type discount,
          the value must be negative: min -999999999999999998, max -1.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      unitPrice:
        description: >-
          The unit price for this item excluding taxes. The unit amount should
          be given as smallest currency unit.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      unitPriceWithTax:
        description: >-
          The unit price for this item including taxes. The unit amount should
          be given as smallest currency unit.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      tax:
        description: >-
          The tax rate for the corresponding item.
          Will be returned in float format only if scale part contains no trailing zeros.
          10.99 -> 10.99
          10.90 -> 10.9
          10.00 -> 10
          10.0 -> 10
          10 -> 10
        type: number
        format: float
        minimum: 0
        maximum: 100
      quantity:
        description: The quantity for this item.
        type: number
        format: int
        minimum: 1
      discount:
        description: item specific discount
        type: number
        format: int
        minimum: -999999999999999998
        maximum: -1
      articleType:
        $ref: '#/definitions/ArticleTypeEnum'
  NotificationContent:
    title: NotificationContent
    type: object
    description: >-
      This is the data structure being sent to subscribed merchant notification URN.


      To validate the notification contents please invoke an HTTPS POST to
      "/notifications/validate?address=yourUrlencodedNotificationUrn"
      with body carrying the NotificationContent exactly as received by the listener.


      Validation result would simply respond with "VALIDATED" or "INVALID".

      Note: If this data structure is being received on your URL (http/https),
            a response with http status code 2xx (i.e. 204) is expected prior an attempt to validate the contents.
    properties:
      eventId:
        type: string
        description: The unique identifier for this event.
      apiVersion:
        type: string
        description: The API version that triggered the event.
      ipAddress:
        type: string
        description: The ip address that caused the request.
      globalTrackId:
        type: string
        description: A string corresponding to the ID of the request that cause the event. Can be null.
      mode:
        type: string
        description: String "live" or "test".
      type:
        type: string
        description: >-
          There are many notification types. Very common and useful are:


          order.create.success

          order.update.success

          transaction.create.success

          transaction.update.success
      notificationId:
        type: string
        description: The id of the configured notification that caused this event to be fired.
      notificationApiVersion:
        type: string
        description: Currently only "1.0" api version is available.
      createdAt:
        type: number
        description: >-
          Unix timestamp.
      payload:
        type: object
        description: >-
          For create notifications, the payload contains the object being created.
          For update notifications, please see DiffPayload.
          The payload depends on NotificationContent's type.
  DiffPayload:
    title: DiffPayload
    type: object
    properties:
      asyncNotificationSubscriptionId:
        type: string
        description: >-
          Optional guid for this notification subscription.
          Present for all per-order notifications.
      oldObject:
        type: object
        description: >-
          The object state before any changes.
          See DiffPayload.diff as a shortcut to find what has changed between oldObject and newObject.
      newObject:
        type: object
        description: >-
          The object state after any changes.
          See DiffPayload.diff as a shortcut to find what has changed between oldObject and newObject.
      diff:
        type: array
        items:
          $ref: '#/definitions/ChangeObject'
  ChangeObject:
    title: ChangeObject
    type: object
    properties:
      key:
        type: string
        description: >-
          Name of the changed property.
          For example for transaction's status: "status".
      source:
        type: string
        description: >-
          String representation of the property value before the change.
          For example for transaction's status: "PENDING".
      destination:
        type: string
        description: >-
          String representation of the property value after the change.
          For example for transaction's status: "IN_PROGRESS".
  NotificationSubscriptionRequest:
    title: NotificationSubscriptionRequest
    type: object
    description: An data structure that specifies callback URN and any other callback settings.
    properties:
      notificationUrn:
        description: >-
          Callback URN which will receive the contents of the notification.
          For http listeners, use an URN like https://your-domain-listener/specific-handler.
          For email listeners, use an URN like mailto:specific-handler@your-domain-listener.
          See the content to expect in the listener: NotificationContent.
        type: string
        format: url
        minLength: 6
        maxLength: 2048
      notificationState:
        description: >-
          A choice of what kind of updates to receive by this handler as specified in this object's notificationUrn.
          Add "CREATED" to the array to receive notification on object creation.
          Add "UPDATED" to the array to receive notification on object property changes.
        type: array
        items:
          $ref: '#/definitions/NotificationStateEnum'
    required:
      - notificationUrn
      - notificationState
  Async:
    title: Async
    type: object
    description: Async object for asynchronous payment methods like PayPal.
    properties:
      successUrl:
        description: >-
          In case of a successful order the customer will be redirected to the
          given URL.
        type: string
        format: url
        minLength: 6
        maxLength: 2048
      failureUrl:
        description: >-
          In case of a failed order the customer will be redirected to the given
          URL.
        type: string
        format: url
        minLength: 6
        maxLength: 2048
      cancelUrl:
        description: >-
          In case of a cancellation by the customer, the customer will be
          redirected to the given URL.
        type: string
        format: url
        minLength: 6
        maxLength: 2048
      notifications:
        description: >-
          Optional notification subscription requests.
          This enables receiving notification for this order's transactions.
        type: array
        items:
          $ref: '#/definitions/NotificationSubscriptionRequest'
    required:
      - successUrl
      - failureUrl
      - cancelUrl
  OrderCreateRequest:
    title: OrderCreateRequest
    type: object
    properties:
      initialAmount:
        description: |
          Amount as smallest currency unit
          e.g 100 EUR will be result in amount = 10000
        type: number
        format: int
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      async:
        $ref: '#/definitions/Async'
      transactionType:
        $ref: '#/definitions/InitialTransactionTypeBaseTypeEnum'
      terms:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your terms and
          conditions. E.g. this is required for RatePAY orders.
        type: number
        format: integer
      privacy:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your privacy policy.
          E.g. this is required for RatePAY orders.
        type: number
        format: integer
      merchantOrderId:
        description: The order id from your system/shop for Creditcards only 30 alphanumeric characters.
        type: string
        minLength: 1
        maxLength: 255
      description:
        description: The description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      statementDescription:
        description: The statement description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 255
      basket:
        description: >-
          The basket of your order. (optional, mandatory for ratepay-invoice,
          ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      customer:
        description: The customer id which will be used to process this order.
        type: string
        minLength: 1
        maxLength: 255
      persona:
        description: >-
          The persona id which will be used to process this order. note: the
          persona must be a persona from the given customer.
        type: string
        minLength: 1
        maxLength: 255
      billingAddress:
        description: The address id used as billing address for this order.
        type: string
        minLength: 1
        maxLength: 255
      shippingAddress:
        description: The address id used as shipping address for this order.
        type: string
        minLength: 1
        maxLength: 255
      ipAddress:
        description: The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: string
        minLength: 1
        maxLength: 255
      channel:
        $ref: '#/definitions/ChannelsBaseTypeEnum'
      source:
        description: The source is a form free descriptor of the origin.
        type: string
        minLength: 1
        maxLength: 128
      allowedProducts:
        description: A List of all valid products for this order.
        type: array
        items:
          $ref: '#/definitions/ProductsBaseTypeEnum'
      locale:
        description: Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766.
          Examples: en-US, en-GB. Only for PayPal and WeChat Pay.
        type: string
      risk:
        $ref: '#/definitions/Risk'
    required:
      - initialAmount
      - currency
      - async
      - transactionType
  NotificationStateEnum:
    title: NotificationStateEnum
    type: string
    description: >-
      A choice of what kind of updates to receive by this handler as specified in this object's notificationUrn.
      "CREATED" to receive notification on object creation.
      "UPDATED" to receive notification on object property changes.
    enum:
      - CREATED
      - UPDATED
  InitialTransactionTypeBaseTypeEnum:
    title: InitialTransactionTypeBaseTypeEnum
    type: string
    description: The type of the underlying Transaction
    enum:
      - PREAUTH
      - DEBIT
  OrderUpdateRequest:
    title: OrderUpdateRequest
    type: object
    properties:
      terms:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your terms and
          conditions. E.g. this is required for RatePAY orders.
        type: number
        format: integer
      privacy:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your privacy policy.
          E.g. this is required for RatePAY orders.
        type: number
        format: integer
      merchantOrderId:
        description: The order id from your system/shop for Creditcards only 30 alphanumeric characters.
        type: string
        minLength: 1
        maxLength: 255
      description:
        description: The description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      statementDescription:
        description: The statement description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      initialAmount:
        description: |
          Amount as smallest currency unit
          e.g 100 EUR will be result in amount = 10000
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      basket:
        description: >-
          The basket of your order. (optional, mandatory for ratepay-invoice,
          ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      customer:
        description: The customer id which will be used to process this order.
        type: string
        minLength: 1
        maxLength: 255
      persona:
        description: >-
          The persona id which will be used to process this order. note: the
          persona must be a persona from the given customer.
        type: string
        minLength: 1
        maxLength: 255
      billingAddress:
        description: The address id used as billing address for this order.
        type: string
        minLength: 1
        maxLength: 255
      shippingAddress:
        description: The address id used as shipping address for this order.
        type: string
        minLength: 1
        maxLength: 255
      ipAddress:
        description: The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: string
        minLength: 1
        maxLength: 255
      channel:
        $ref: '#/definitions/ChannelsBaseTypeEnum'
      source:
        description: The source is a form free descriptor of the origin.
        type: string
        minLength: 1
        maxLength: 128
      async:
        $ref: '#/definitions/Async'
      allowedProducts:
        description: A List of all valid products for this order.
        type: array
        items:
          $ref: '#/definitions/ProductsBaseTypeEnum'
      transactionType:
        $ref: '#/definitions/InitialTransactionTypeBaseTypeEnum'
      risk:
        $ref: '#/definitions/Risk'
      executeOrder:
        description: >-
          Paypal specific parameter. If true the order will be processed after the update.
          This property is used to finish the processing of order, when the Paypal debit or preauth is created
          with 'addressOverride=false'. Defaut is false.
        type: boolean
      locale:
        description: Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766.
          Examples: en-US, en-GB. Only for PayPal and WeChat Pay.
        type: string

  OrderOpenRequest:
    title: OrderOpenRequest
    type: object
    properties:
      initialAmount:
        description: |
          Amount as smallest currency unit
          e.g 100 EUR will be result in amount = 10000
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: |
          Currency code according to https://en.wikipedia.org/wiki/ISO_4217
        type: string
        minLength: 3
        maxLength: 3
      product:
        $ref: '#/definitions/ProductsBaseTypeEnum'
      async:
        $ref: '#/definitions/Async'
      terms:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your terms and
          conditions. E.g. this is required for RatePAY orders.
        type: number
        format: integer
      privacy:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your privacy policy.
          E.g. this is required for RatePAY orders.
        type: number
        format: integer
      merchantOrderId:
        description: The order id from your system/shop for Creditcards only 30 alphanumeric characters.
        type: string
        minLength: 1
        maxLength: 255
      description:
        description: The description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      statementDescription:
        description: The statement description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      basket:
        description: >-
          The basket of your order. (optional, mandatory for ratepay-invoice,
          ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      customer:
        description: The customer id which will be used to process this order.
        type: string
        minLength: 1
        maxLength: 255
      persona:
        description: >-
          The persona id which will be used to process this order. note: the
          persona must be a persona from the given customer.
        type: string
        minLength: 1
        maxLength: 255
      billingAddress:
        description: The address id used as billing address for this order.
        type: string
        minLength: 1
        maxLength: 255
      shippingAddress:
        description: The address id used as shipping address for this order.
        type: string
        minLength: 1
        maxLength: 255
      ipAddress:
        description: The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: string
        minLength: 1
        maxLength: 255
      channel:
        $ref: '#/definitions/ChannelsBaseTypeEnum'
      source:
        description: The source is a form free descriptor of the origin.
        type: string
        minLength: 1
        maxLength: 128
      payment:
        $ref: '#/definitions/OrderOpenPaymentRequest'
      deviceIdent:
        $ref: '#/definitions/DeviceIdentRequest'
      tracking:
        description: specific parameter for all payment methods, array of object of type Tracking
        type: array
        items:
          $ref: '#/definitions/Tracking'
      meta:
        $ref: '#/definitions/MetaRequest'
      locale:
        description: Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766.
          Examples: en-US, en-GB. Only for PayPal and WeChat Pay.
        type: string
      risk:
        $ref: '#/definitions/Risk'
    required:
      - initialAmount
      - currency
      - product
      - async
  OrderCreditRequest:
    title: OrderCreditRequest
    type: object
    properties:
      initialAmount:
        description: |
          Amount as smallest currency unit
          e.g 100 EUR will be result in amount = 10000
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: |
          Currency code according to https://en.wikipedia.org/wiki/ISO_4217
        type: string
        minLength: 3
        maxLength: 3
      product:
        $ref: '#/definitions/ProductsBaseTypeEnum'
      terms:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your terms and
          conditions. E.g. this is required for RatePAY orders.
        type: number
        format: integer
      privacy:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your privacy policy.
          E.g. this is required for RatePAY orders.
        type: number
        format: integer
      merchantOrderId:
        description: The order id from your system/shop for Creditcards only 30 alphanumeric characters.
        type: string
        minLength: 1
        maxLength: 255
      description:
        description: The description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      statementDescription:
        description: The statement description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      basket:
        description: >-
          The basket of your order. (optional, mandatory for ratepay-invoice,
          ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      customer:
        description: The customer id which will be used to process this order.
        type: string
        minLength: 1
        maxLength: 255
      persona:
        description: >-
          The persona id which will be used to process this order. note: the
          persona must be a persona from the given customer.
        type: string
        minLength: 1
        maxLength: 255
      billingAddress:
        description: The address id used as billing address for this order.
        type: string
        minLength: 1
        maxLength: 255
      shippingAddress:
        description: The address id used as shipping address for this order.
        type: string
        minLength: 1
        maxLength: 255
      ipAddress:
        description: The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: string
        minLength: 1
        maxLength: 255
      channel:
        $ref: '#/definitions/ChannelsBaseTypeEnum'
      source:
        description: The source is a form free descriptor of the origin.
        type: string
        minLength: 1
        maxLength: 128
      payment:
        $ref: '#/definitions/CreditOrderPaymentRequest'
      deviceIdent:
        $ref: '#/definitions/DeviceIdentRequest'
      locale:
        description: Language tag consisting of a two-letter language code combined with a two-letter country code according to RFC 1766.
          Examples: en-US, en-GB. Only for PayPal and WeChat Pay.
        type: string
    required:
      - initialAmount
      - currency
      - product
      - async
  OrderOpenPaymentRequest:
    title: OrderOpenPaymentRequest
    type: object
    description: Additional information Payment needed to proceed the order.
    properties:
      paymentInstrumentId:
        description: >-
          An ID of an already created paymentinstrument. Used to proceed the
          order. (optional)
        type: string
        minLength: 1
        maxLength: 255
      cardNumber:
        description: >-
          The Creditcard PAN used to proceed. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 12
        maxLength: 19
      verification:
        description: >-
          The verification number of the creditcard. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 3
        maxLength: 4
      expiryMonth:
        description: >-
          The expiry month of the creditcard. Format: 01 -> january, 02 ->
          February, etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      expiryYear:
        description: >-
          The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002,
          etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      cardHolder:
        description: The full name of the cardholder.
        type: string
        minLength: 3
        maxLength: 128
      bankName:
        description: >-
          The name of the bank of the bank account. (mandatory for sepa,
          optional if a sepa paymentInstrumentId was passed)
        type: string
        minLength: 1
        maxLength: 255
      iban:
        description: >-
          IBAN of the bank account. (mandatory for sepa, optional if a sepa
          paymentInstrumentId was passed)
        type: string
        maxLength: 34
      bic:
        description: >-
          BIC of the bank account. (mandatory for sepa, optional if a sepa
          paymentInstrumentId was passed)
        type: string
        minLength: 8
        maxLength: 11
      accountHolder:
        description: >-
          The account holders name of the bank account. (mandatory for sepa,
          optional if a paymentInstrumentId was passed. Optional parameter for PPRO payments methods - alipay, iDeal, bancontact, wechat pay)
        type: string
        minLength: 4
        maxLength: 128
      deferred:
        description: >-
          Indicates if the order should be deferred. (only available for paypal preauth/execute, optional)
        type: boolean
      numberOfRates:
        description: Number of rates for ratepay installment
        type: integer
      rate:
        description: Rate for ratepay installment
        type: integer
      lastRate:
        description: Last rate for ratepay installment
        type: integer
      interestRate:
        description: Interest rate for ratepay installment
        type: number
      totalAmount:
        description: Total amount for ratepay installment
        type: integer
      initializeCustomerTokenization:
        description: >-
          Only for Klarna preauth or debit. True if we want to create token and next orders will be as recurring, false otherwise.
          Organization customers can't use initializeCustomerTokenization.
        type: boolean
      mandate:
        $ref: '#/definitions/MandateRequest'
      riskIdentId:
        description: >-
          Only for RatePay preauth or debit.
        type: string
        minLength: 1
        maxLength: 80
      countryCode:
        description: >-
          Optional parameter only for WeChat Pay via PPRO debit.
          The 2-letter ISO country code of the country in which the payment instrument is issued/operated (e.g. DE)
          Format [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]
        type: string
        minLength: 2
        maxLength: 2
      createRecurringBillingAgreement:
        description: Only for paypal. Indicates if the payment is recurring.
        type: boolean
      cofContract:
        type: object
        properties:
          id:
            type: string
            description: >-
              Unique identifier for the COF contract of the payment instrument.

              In case more than one COF type should be used for one paymentInstrument this identifier should be stored by the merchant and referenced in the payment transactions.
            example: contract_123abc456x
          type:
            $ref: '#/definitions/CofContractTypeEnum'
          recurringExpiry:
            description: >-
              Date after which no further authorizations shall be performed. This field is limited to 8 characters, and the
            type: string
            format: date
          recurringFrequency:
            description: >-
              Indicates the minimum number of days between authorizations. The field is limited to maximum 4 characters.
            type: integer
            minimum: 1
            maximum: 9999
  CreditOrderPaymentRequest:
    title: CreditOrderPaymentRequest
    type: object
    description: Additional information Payment needed to proceed the order.
    properties:
      paymentInstrumentId:
        description: >-
          An ID of an already created paymentinstrument. Used to proceed the
          order. (optional)
        type: string
        minLength: 1
        maxLength: 255
      cardNumber:
        description: >-
          The Creditcard PAN used to proceed. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 12
        maxLength: 19
      verification:
        description: >-
          The verification number of the creditcard. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 3
        maxLength: 4
      expiryMonth:
        description: >-
          The expiry month of the creditcard. Format: 01 -> january, 02 ->
          February, etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      expiryYear:
        description: >-
          The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002,
          etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      cardHolder:
        description: The full name of the cardholder.
        type: string
        minLength: 3
        maxLength: 128
      deferred:
        description: >-
          Indicates if the order should be deferred. (only available for paypal preauth/execute, optional)
        type: boolean
      emailSubject:
        description: Only for paypal. The subject line of the email that PayPal sends when the transaction is completed. The emailSubject must follow the following pattern '^(\p{L}|\s|\d)*$'
        type: string
        minLength: 1
        maxLength: 255
      receiverType:
        description: Only for paypal. Indicates how you identify the recipients of payments in this call to MassPay. Must be either 'EmailAddress', 'PhoneNumber', or 'UserID'.
        type: string
      receiverEmail:
        description: Only for paypal. Email address of recipient. Mandatory if receiverType is EmailAddress.
        type: string
        minLength: 1
        maxLength: 127
      receiverPhone:
        description: Only for paypal. Mobile phone number of recipient. Mandatory if receiverType is PhoneNumber. The receiverPhone must follow the following pattern '^\s*\+?(\d|\-|\s|\/){1,16}$'
        type: string
        minLength: 1
        maxLength: 16
      receiverId:
        description: Only for paypal. Unique PayPal customer account number. Mandatory if receiverType is UserID.
        type: string
        minLength: 1
        maxLength: 17
      createRecurringBillingAgreement:
        description: Only for paypal. Indicates if the payment is recurring.
        type: boolean
  BasketRequest:
    title: Basket
    type: object
    description: Basket of the customer (only mandatory for Klarna Orders)
    properties:
      name:
        description: name of the article
        type: string
      articleType:
        $ref: '#/definitions/ArticleTypeEnum'
      articleUrl:
        description: This is the url of the item in the basket
        type: string
      imageUrl:
        description: The image url of the item in the basket
        type: string
      quantity:
        description: Quantity of the article
        type: number
      unitPrice:
        description: Unit price of the article
        type: number
      totalPrice:
        description: Total price of the article
        type: number
      discount:
        description: It is negative value between -999999999999999998 and -1
        type: number
  MandateRequest:
    title: Mandate
    type: object
    description: SEPA mandate (only mandatory for SEPA orders)
    properties:
      mandateId:
        description: The mandateId assigned to the SEPA mandate (optional, payengine will generate the id if not present)
          The id needs to follow the following pattern '^[a-zA-Z0-9\-]{1,35}'
        type: string
      createdDateTime:
        description: Timestamp for mandate creation (mandatory)
        type: number
        format: date-time
      mandateText:
        description: Mandate text displayed to the customer (mandatory)
        type: string
      directDebitType:
        title: DirectDebitType
        type: string
        description: >
          The current mandate type of the direct debit type.

          The mandate type can be one of the following.

          FIRST: It's the first execution of the mandate
          SINGLE: It's used only for one execution of the mandate
          RECURRING: It's used for recurring mandate usage
          FINAL: It's the last execution of the recurring mandate
        enum:
          - FIRST
          - SINGLE
          - RECURRING
          - FINAL
  OrderResponse:
    title: OrderResponse
    type: object
    properties:
      orderId:
        description: The order id from payengine.
        type: string
        minLength: 1
        maxLength: 255
      initialAmount:
        description: The initial amount given to create this order.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      preauthorizedAmount:
        description: The amount which has been authorized.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      capturedAmount:
        description: The amount which has been captured.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      refundedAmount:
        description: The amount which has been refunded.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      canceledAmount:
        description: The amount which has been cancelled.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      transactions:
        description: A list of all underlying transactions.
        type: array
        items:
          $ref: '#/definitions/TransactionResponseChildren'
      status:
        $ref: '#/definitions/OrderStatesBaseTypeEnum'
      channel:
        $ref: '#/definitions/ChannelsBaseTypeEnum'
      createdAt:
        description: This timestamp indicates the creation of this order.
        type: number
        format: date-time
      modifiedAt:
        description: This timestamp indicates the last modification of this order.
        type: number
        format: date-time
      terms:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your terms and
          conditions. E.g. this is required for RatePAY orders.
        type: number
        format: integer
      privacy:
        description: >-
          A timestamp in milliseconds of the approval of the customer to your privacy policy.
          E.g. this is required for RatePAY orders.
        type: number
        format: integer
      merchantOrderId:
        description: The order id from your system/shop for Creditcards only 30 alphanumeric characters.
        type: string
        minLength: 1
        maxLength: 255
      paymentProviderTransactionId:
        description: The order id from the payment provider.
        type: string
        minLength: 1
        maxLength: 255
      description:
        description: The description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      statementDescription:
        description: The statement description from your system/shop of this order.
        type: string
        minLength: 1
        maxLength: 128
      basket:
        description: >-
          The basket of your order. (optional, mandatory for ratepay-invoice,
          ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      customer:
        $ref: '#/definitions/CustomerResponse'
      persona:
        $ref: '#/definitions/PersonaResponse'
      billingAddress:
        $ref: '#/definitions/AddressResponse'
      shippingAddress:
        $ref: '#/definitions/AddressResponse'
      ipAddress:
        description: The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: string
        minLength: 1
        maxLength: 255
      paymentInstrument:
        $ref: '#/definitions/PaymentInstrumentResponse'
      redirectUrl:
        description: The URL which the customer needs to be redirected to.
        type: string
        format: url
        minLength: 6
        maxLength: 2048
      source:
        description: The source of the order.
        type: string
        minLength: 1
        maxLength: 128
      product:
        $ref: '#/definitions/ProductsBaseTypeEnum'
      allowedProducts:
        description: A List of all valid products for this order.
        type: array
        items:
          $ref: '#/definitions/ProductsBaseTypeEnum'
      settled:
        description: A flag which indicates if this order has been settled or not.
        type: boolean
      settlementDate:
        description: The date of the settlement.
        type: string
        format: date-time
      transactionType:
        $ref: '#/definitions/InitialTransactionTypeBaseTypeEnum'
      deviceIdent:
        $ref: '#/definitions/DeviceIdentResponse'
      meta:
        $ref: '#/definitions/OrderMetaInfResponse'
      lastOpereation:
        description: >-
          A combined field of the last executed transaction and the status of the transaction.
          "TRANSACTION_<TRANSACTION_TYPE>_<TRANSACTION_STATUS>"
        type: string
        enum:
          - TRANSACTION_PREAUTH_OK
          - TRANSACTION_PREAUTH_CREATED
          - TRANSACTION_PREAUTH_IN_PROGRESS
          - TRANSACTION_PREAUTH_PENDING
          - TRANSACTION_PREAUTH_FAILURE
          - TRANSACTION_PREAUTH_DECLINED
          - TRANSACTION_PREAUTH_ABORTED
          - TRANSACTION_PREAUTH_EXPIRED
          - TRANSACTION_CANCEL_OK
          - TRANSACTION_CANCEL_SUCCESS
          - TRANSACTION_CANCEL_CREATED
          - TRANSACTION_CANCEL_IN_PROGRESS
          - TRANSACTION_CANCEL_FAILURE
          - TRANSACTION_CANCEL_DECLINED
          - TRANSACTION_DEBIT_OK
          - TRANSACTION_DEBIT_SUCCESS
          - TRANSACTION_DEBIT_CREATED
          - TRANSACTION_DEBIT_IN_PROGRESS
          - TRANSACTION_DEBIT_PENDING
          - TRANSACTION_DEBIT_FAILURE
          - TRANSACTION_DEBIT_DECLINED
          - TRANSACTION_DEBIT_ABORTED
          - TRANSACTION_DEBIT_EXPIRED
          - TRANSACTION_CAPTURE_OK
          - TRANSACTION_CAPTURE_SUCCESS
          - TRANSACTION_CAPTURE_CREATED
          - TRANSACTION_CAPTURE_IN_PROGRESS
          - TRANSACTION_CAPTURE_FAILURE
          - TRANSACTION_CAPTURE_DECLINED
          - TRANSACTION_CAPTURE_EXPIRED
          - TRANSACTION_REFUND_OK
          - TRANSACTION_REFUND_SUCCESS
          - TRANSACTION_REFUND_CREATED
          - TRANSACTION_REFUND_IN_PROGRESS
          - TRANSACTION_REFUND_FAILURE
          - TRANSACTION_REFUND_DECLINED
          - TRANSACTION_CREDIT_OK
          - TRANSACTION_CREDIT_SUCCESS
          - TRANSACTION_CREDIT_CREATED
          - TRANSACTION_CREDIT_IN_PROGRESS
          - TRANSACTION_CREDIT_PENDING
          - TRANSACTION_CREDIT_FAILURE
          - TRANSACTION_CREDIT_ABORTED
          - TRANSACTION_CREDIT_DECLINED
          - TRANSACTION_CHARGEBACK_CHARGEBACK
          - TRANSACTION_CHARGEBACK_BOOKED
          - TRANSACTION_CHARGEBACK_LIFTED
          - TRANSACTION_CHARGEBACK_BOOKIN
    required:
      - orderId
      - initialAmount
      - preauthorizedAmount
      - capturedAmount
      - refundedAmount
      - canceledAmount
      - currency
      - transactions
      - status
      - channel
      - createdAt
      - modifiedAt
  OrderMetaInfResponse:
    title: OrderMetaInfResponse
    type: object
    properties:
      deferred:
        description: >-
          Indicates if the order is marked as deferred. Available only for paypal.
        type: boolean
      emailSubject:
        description: Available only for paypal. The subject line of the email that PayPal sends when the transaction is completed.
        type: string
      receiverType:
        description: Available only for paypal. Indicates how you identify the recipients of payments in this call to MassPay.
        type: string
      receiverEmail:
        description: Available only for paypal. Email address of recipient.
        type: string
      receiverPhone:
        description: Available only for paypal. Mobile phone number of recipient.
        type: string
      receiverId:
        description: Available only for paypal. Unique PayPal customer account number.
        type: string
      preferredLanguage:
        type: string
        description: >-
          Available only for RatePay, iDEAL, Alipay, Bancontact and WeChat Pay.
      mobileView:
        type: boolean
        description: >-
          Available only for Alipay.
      cofContract:
        $ref: '#/definitions/CofContractResponse'
      threeDsData:
        type: object
        properties:
          authenticationResult:
            $ref: '#/definitions/AuthenticationResult'
  CustomerResponse:
    title: CustomerResponse
    type: object
    properties:
      customerId:
        description: The identifier of the customer. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      email:
        description: The customers email address. unique.
        type: string
        format: email
      merchantCustomerId:
        description: The identifier of the customer. Created by you.
        type: string
        minLength: 1
        maxLength: 255
      addresses:
        description: >-
          A list of all underlying addresses which are connected to the
          customer.
        type: array
        items:
          $ref: '#/definitions/AddressResponse'
      personas:
        description: A list of all underlying personas which are connected to the customer.
        type: array
        items:
          $ref: '#/definitions/PersonaResponse'
      paymentInstruments:
        description: >-
          A list of all underlying paymentinstruments which are connected to the
          customer.
        type: array
        items:
          $ref: '#/definitions/PaymentInstrumentResponse'
    required:
      - customerId
      - email
  AddressResponse:
    title: AddressResponse
    type: object
    properties:
      addressId:
        description: The identifier of the address. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      createdAt:
        description: This timestamp indicates the creation of this address.
        type: number
        format: date-time
      modifiedAt:
        description: This timestamp indicates the last modification of this address.
        type: number
        format: date-time
      firstName:
        description: The firstname of this address. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      lastName:
        description: The lastname of this address. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      street:
        description: The street of this address.
        type: string
        minLength: 1
        maxLength: 35
      houseNumber:
        description: The housenumber of the street.
        type: string
        minLength: 1
        maxLength: 35
      city:
        description: The city of the address.
        type: string
        minLength: 1
        maxLength: 35
      zip:
        description: The zip of the address.
        type: string
        minLength: 3
        maxLength: 10
      country:
        description: >-
          The country of the address. Format
          [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]
        type: string
        minLength: 2
        maxLength: 2
      state:
        description: The state of the address.
        type: string
        minLength: 1
        maxLength: 35
      phone:
        description: The phone of the address. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      fax:
        description: The fax of the address. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      mobile:
        description: The mobile of the address. limited to 16 characters!
        type: string
      title:
        description: The title of the address.
        type: string
        minLength: 1
        maxLength: 35
      additionalDetails:
        description: Additional details for this address. This is a form free descriptor.
        type: string
        minLength: 1
        maxLength: 255
    required:
      - addressId
      - createdAt
      - modifiedAt
  PersonaResponse:
    title: PersonaResponse
    type: object
    properties:
      personaId:
        description: The identifier of the persona. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      createdAt:
        description: This timestamp indicates the creation of this persona.
        type: number
        format: date-time
      modifiedAt:
        description: This timestamp indicates the last modification of this persona.
        type: number
        format: date-time
      firstName:
        description: The firstname of this persona. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      lastName:
        description: The lastname of this persona. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      phone:
        description: The phone of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      mobile:
        description: The mobile of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      fax:
        description: The fax of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      birthday:
        description: The birthday of the persona. Format as milliseconds since epoch representing UTC Date.
        type: number
        format: date-time
      gender:
        $ref: '#/definitions/GenderBaseTypeEnum'
      title:
        description: The title of the persona.
        type: string
        minLength: 1
        maxLength: 35
    required:
      - personaId
      - createdAt
      - modifiedAt
  PaymentInstrumentResponse:
    title: PaymentInstrumentResponse
    type: object
    description: >-
      The paymentinstrument which has been used to process this order. note: If
      no paymentinstrument has been submitted, one has been created with your
      submitted data.
    properties:
      paymentInstrumentId:
        description: The identifier of the paymentinstrument. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      merchantPaymentInstrumentId:
        description: >-
          The identifier of the paymentinstrument on your system. Created by
          you. limited to 100 characters.
        type: string
        minLength: 1
        maxLength: 255
      origin:
        $ref: '#/definitions/ProductsBaseTypeEnum'
      type:
        $ref: '#/definitions/PaymentInstrumentType'
      recurring:
        description: >-
          This flag indicates if this paymentinstrument can be used for
          recurring payments.
        type: boolean
      createdAt:
        description: Timestamp when it was created
        type: integer
      modifiedAt:
        description: Timestamp when it was last updated
        type: integer
      attributes:
        description: >-
          Additional attributes of this paymentinstrument. E.g. masked bank- or
          creditcarddata.
          For Klarna we will have possibleTypes object in the response (e.g. klarna-pay-now, klarna-pay-later, klarna-slice-it)
          Also we will have country, and locale.
          For PPRO payments methods we could have accountHolder (if one was used for making the transaction)
        type: object
        properties:
          cofContracts:
            description: >-
              For CreditCard only
            type: array
            items:
              $ref: '#/definitions/CofContractResponse'
    required:
      - paymentInstrumentId
      - merchantPaymentInstrumentId
      - origin
      - type
      - recurring
      - attributes
  ThreeDsVersionSpecificData:
    title: ThreeDsVersionSpecificData
    type: object
    description: Generic object which will contain 3DS version specific data
    properties:
      methodUrl:
        description: The ACS URL that will be used by the 3DS Method, retrieved from the card range data repository (3DS 2.0 only).
        type: string
        minLength: 1
        maxLength: 255
        example: https://www.acs.com/script
      base64EncodedThreeDsMethodData:
        type: string
        example: YmFzZTY0RW5jb2RlZFRocmVlRHNNZXRob2REYXRh
        description: >-
          Base64 encoded JSON object containing 3DS Server Transaction ID and 3DS Method Notification URL.
          This value shall be used when communicating to the ACS 3DS Method URL. (3DS 2.0 only)
  ThreeDsVersionResponse:
    title: ThreeDsVersionResponse
    type: object
    description: >-
      The 3DS object which will be used for versioning.
    properties:
      id:
        description: Payeninge identifier for the 3DS version object
        type: string
        minLength: 1
        maxLength: 255
        example: threedsversion_123abc456z
      createdAt:
        type: number
        description: Timestamp when card check was initiated
        example: 1562769950956
      modifiedAt:
        type: number
        description: Timestamp when card check was modified
        example: 1562769950956
      version:
        description: Optional parameter showing the 3DS version if the card is enrolled for 3DS. Could be used also as indicator if the card is 3DS enrolled.
        type: string
        example: '2.0'
      specificData:
        $ref: '#/definitions/ThreeDsVersionSpecificData'
    required:
      - id
      - createdAt
      - modifiedAt
  InstallmentConfigResponse:
    title: InstallmentConfigResponse
    type: object
    description: >-
      Installment Configurations
    properties:
      rateMinNormal:
        description: Minimum rate of a normal installment plan
        type: integer
      monthNumberMin:
        description: >-
          Minimum duration of installment plan
        type: integer
      monthNumberMax:
        description: >-
          Maximum duration of installment plan
        type: integer
    required:
      - rateMinNormal
      - monthNumberMin
      - monthNumberMax
  InstallmentCalculationRateResponse:
    title: InstallmentCalculationRateResponse
    type: object
    description: >-
      Installment Calculation Rate Response
    properties:
      totalAmount:
        description: Total of amount, interest-amount and service-charge
        type: integer
      amount:
        description: Price that has to be financed
        type: integer
      interestAmount:
        description: Total of all monthly paid interests
        type: integer
      serviceCharge:
        description: Additional costs of financing
        type: integer
      interestRate:
        description: Interest-rate which will be used to calculate the annual percentage rate
        type: integer
      annualPercentageRate:
        description: Interest-rate based on service-charge and interest- rate
        type: integer
      monthlyDebitInterest:
        description: Monthly interest rates based on annual-percentage- rate
        type: integer
      numberOfRates:
        description: Number of months; duration of the installment plan
        type: integer
      rate:
        description: Monthly rate to be paid by the customer
        type: integer
      lastRate:
        description: Last monthly rate to be paid by the customer
        type: integer
    required:
      - totalAmount
      - amount
      - interestAmount
      - serviceCharge
      - interestRate
      - annualPercentageRate
      - monthlyDebitInterest
      - numberOfRates
      - rate
      - lastRate
  InstallmentCalculationTimeResponse:
    title: InstallmentCalculationTimeResponse
    type: object
    description: >-
      Installment Calculation Time Response
    properties:
      totalAmount:
        description: Total of amount, interest-amount and service-charge
        type: integer
      amount:
        description: Price that has to be financed
        type: integer
      interestAmount:
        description: Total of all monthly paid interests
        type: integer
      serviceCharge:
        description: Additional costs of financing
        type: integer
      interestRate:
        description: Interest-rate which will be used to calculate the annual percentage rate
        type: integer
      annualPercentageRate:
        description: Interest-rate based on service-charge and interest- rate
        type: integer
      monthlyDebitInterest:
        description: Monthly interest rates based on annual-percentage- rate
        type: integer
      numberOfRates:
        description: Number of months; duration of the installment plan
        type: integer
      rate:
        description: Monthly rate to be paid by the customer
        type: integer
      lastRate:
        description: Last monthly rate to be paid by the customer
        type: integer
    required:
      - totalAmount
      - amount
      - interestAmount
      - serviceCharge
      - interestRate
      - annualPercentageRate
      - monthlyDebitInterest
      - numberOfRates
      - rate
      - lastRate
  TransactionResponseChildren:
    title: TransactionResponseChildren
    type: object
    properties:
      type:
        $ref: '#/definitions/TransactionType'
      transactionId:
        description: The identifier of the transaction. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      status:
        $ref: '#/definitions/TransactionStatesBaseTypeEnum'
      initialAmount:
        description: The initial amount given to create this transaction.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      description:
        description: The description from your system/shop of this transaction.
        type: string
        minLength: 1
        maxLength: 128
      createdAt:
        description: This timestamp indicates the creation of this transaction.
        type: number
        format: date-time
      modifiedAt:
        description: This timestamp indicates the last modification of this transaction.
        type: number
        format: date-time
      order:
        description: The identifier of the connected order.
        type: string
        minLength: 1
        maxLength: 255
      transactions:
        description: A list of underlying transactions.
        type: array
        items:
          type: string
      parentTransaction:
        description: The identifier of the parent transaction.
        type: string
        minLength: 1
        maxLength: 255
      descriptor:
        description: Identifier which holds the orderId
        type: string
        minLength: 1
        maxLength: 10
      capturedAmount:
        description: The amount which has been captured.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      refundedAmount:
        description: The amount which has been refunded.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      canceledAmount:
        description: The amount which has been cancelled.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      challange:
        $ref: '#/definitions/Challange'
      tracking:
        description: specific parameter for all payment methods, array of object of type Tracking
        type: array
        items:
          $ref: '#/definitions/Tracking'
      meta:
        $ref: '#/definitions/TransactionMeta'
    required:
      - transactionId
      - status
      - initialAmount
      - currency
      - description
      - createdAt
      - modifiedAt
      - order
      - transactions
      - parentTransaction
      - capturedAmount
      - refundedAmount
      - canceledAmount
  TransactionResponseParent:
    title: TransactionResponseParent
    type: object
    properties:
      type:
        $ref: '#/definitions/TransactionType'
      transactionId:
        description: The identifier of the transaction. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      status:
        $ref: '#/definitions/TransactionStatesBaseTypeEnum'
      initialAmount:
        description: The initial amount given to create this transaction.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      description:
        description: The description from your system/shop of this transaction.
        type: string
        minLength: 1
        maxLength: 128
      createdAt:
        description: This timestamp indicates the creation of this transaction.
        type: number
        format: date-time
      modifiedAt:
        description: This timestamp indicates the last modification of this transaction.
        type: number
        format: date-time
      order:
        $ref: '#/definitions/OrderResponse'
      transactions:
        description: A list of underlying transactions.
        type: array
        items:
          $ref: '#/definitions/TransactionResponseChildren'
      parentTransaction:
        $ref: '#/definitions/TransactionResponseChildren'
      descriptor:
        description: Identifier which holds the orderId
        type: string
        minLength: 1
        maxLength: 10
      capturedAmount:
        description: The amount which has been captured.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      refundedAmount:
        description: The amount which has been refunded.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      canceledAmount:
        description: The amount which has been cancelled.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
      challange:
        $ref: '#/definitions/Challange'
      meta:
        $ref: '#/definitions/TransactionMeta'
    required:
      - transactionId
      - status
      - initialAmount
      - currency
      - description
      - createdAt
      - modifiedAt
      - order
      - transactions
      - parentTransaction
      - capturedAmount
      - refundedAmount
      - canceledAmount
  TransactionMeta:
    title: TransactionMeta
    type: object
    description: >
      Contains payment method specifc meta data.
      For prepayment TAN instructions.
    properties:
      'tanSent':
        description: >
          Flag which indicates if the TAN was sent to the bank
        type: boolean
      'tanSchema':
        description: >
          The TAN schema which was used to finalize a online bank transfer based refund
        type: string
  Challange:
    title: Challange
    type: object
    description: >
      Contains payment method specifc meta data.
      For prepayment TAN instructions.
    properties:
      'title':
        description: >
          The title of the prepayment TAN challange (can be displayed in the TAN form)
        type: string
      'label':
        description: >
          The label of the prepayment tan challange (can be displayed in the TAN form)
        type: string
      'format':
        description: >
          The TAN format for prepayment (iTAN, photoTAN, etc.)
        type: string
      'data':
        description: >
          Optional data field for prepayment is needed for some TAN formats e.g. photoTAN
        type: string
  TransactionStatesBaseTypeEnum:
    title: TransactionStatesBaseTypeEnum
    type: string
    description: >
      The current status of the transaction.

      The status can be one of the following.

      CREATED, PENDING, IN_PROGRESS, OK, SUCCESS, FAILURE, DECLINED, ABORTED,
      EXPIRED
    enum:
      - CREATED
      - PENDING
      - IN_PROGRESS
      - OK
      - SUCCESS
      - FAILURE
      - DECLINED
      - ABORTED
      - EXPIRED
  OrderStatesBaseTypeEnum:
    title: OrderStatesBaseTypeEnum
    type: string
    description: >
      The current status of the order

      It can be one of the following

      CREATED, OPEN, CLOSED

      A order remains open until the initial amount has been refunded or
      cancelled.
    enum:
      - CREATED
      - OPEN
      - CLOSED
  OrganizationEntityTypeEnum:
    title: OrganizationEntityTypeEnum
    type: string
    description: >
      Customers that are organizations use this to specify their entity type.

      LIMITED_COMPANY
      PUBLIC_LIMITED_COMPANY
      ENTREPRENEURIAL_COMPANY
      LIMITED_PARTNERSHIP_LIMITED_COMPANY
      LIMITED_PARTNERSHIP
      GENERAL_PARTNERSHIP
      REGISTERED_SOLE_TRADER
      SOLE_TRADER
      CIVIL_LAW_PARTNERSHIP
      PUBLIC_INSTITUTION
      OTHER
    enum:
      - LIMITED_COMPANY
      - PUBLIC_LIMITED_COMPANY
      - ENTREPRENEURIAL_COMPANY
      - LIMITED_PARTNERSHIP_LIMITED_COMPANY
      - LIMITED_PARTNERSHIP
      - GENERAL_PARTNERSHIP
      - REGISTERED_SOLE_TRADER
      - SOLE_TRADER
      - CIVIL_LAW_PARTNERSHIP
      - PUBLIC_INSTITUTION
      - OTHER
  CaptureResponse:
    title: CaptureResponse
    type: object
    properties:
      refundedAmount:
        description: The amount which has been refunded.
        type: number
        format: int
        minimum: 1
        maximum: 999999999999999999
    required:
      - refundedAmount
    allOf:
      - $ref: '#/definitions/TransactionResponseParent'
  TransactionRequest:
    title: TransactionRequest
    type: object
    properties:
      initialAmount:
        description: |
          Amount as smallest currency unit
          e.g 100 EUR will be result in amount = 10000
        type: number
        format: int
      currency:
        description: 'Currency code according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
      description:
        description: The description from your system/shop of this transaction.
        type: string
        minLength: 1
        maxLength: 128
      basket:
        description: >-
          The basket of your transaction. (optional, mandatory for
          ratepay-invoice, ratepay-directdebit and ratepay-installment)
        type: array
        items:
          $ref: '#/definitions/Item'
      meta:
        $ref: '#/definitions/MetaRequest'
    required:
      - initialAmount
      - currency
  CustomerRequest:
    title: CustomerRequest
    type: object
    properties:
      email:
        description: >-
          The customers email address. unique.
          Mandatory for the products 'klarna-pay-now', 'klarna-pay-later', 'klarna-slice-it'
        type: string
        format: email
        minLength: 1
        maxLength: 254
      merchantCustomerId:
        description: The identifier of the customer. Created by you.
        type: string
        minLength: 1
        maxLength: 255
      customerType:
        description: >-
          Customer type. Specified as "organization" for companies and organizations.
          Mandatory for b2b customers.
        type: string
      organizationRegistrationId:
        description: >-
          Organization registration id.
          Only applicable for organization customer types.
        minLength: 1
        maxLength: 99
        type: string
      organizationVatId:
        description: >-
          Organization VAT id.
          Only used for organization customer types.
        minLength: 1
        maxLength: 99
        type: string
      organizationRegistrationRegister:
        description: >-
          Organization registers can be the court name that registered the company.
          The registry location name, or another other organization registering institution name.
          This field is optional.
        minLength: 1
        maxLength: 99
        type: string
      organizationEntityType:
        $ref: '#/definitions/OrganizationEntityTypeEnum'
      companyName:
        description: Company name. Required for organization customers. limited to 99 characters!
        type: string
        minLength: 1
        maxLength: 99
      reference:
        description: Additional reference within the company. i.e. 'Department XYZ'. Can be specified for organization customers. limited to 99 characters!
        type: string
        minLength: 1
        maxLength: 99
    required:
      - email
  CustomerUpdateRequest:
    title: CustomerUpdateRequest
    type: object
    properties:
      merchantCustomerId:
        description: The identifier of the customer. Created by you.
        type: string
        minLength: 1
        maxLength: 255
  PersonaRequest:
    title: PersonaRequest
    type: object
    properties:
      firstName:
        description: The firstname of this persona. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      lastName:
        description: The lastname of this persona. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      phone:
        description: The phone of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      mobile:
        description: The mobile of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      fax:
        description: The fax of the persona. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      birthday:
        description: The birthday of the persona. Format as milliseconds since epoch representing UTC Date.
        type: number
        format: date-time
      gender:
        $ref: '#/definitions/GenderBaseTypeEnum'
      title:
        description: The title of the persona.
        type: string
        minLength: 1
        maxLength: 35
  AddressRequest:
    title: AddressRequest
    type: object
    properties:
      firstName:
        description: The firstname of this address. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      lastName:
        description: The lastname of this address. limited to 35 characters!
        type: string
        minLength: 1
        maxLength: 35
      street:
        description: The street of this address.
        type: string
        minLength: 1
        maxLength: 35
      houseNumber:
        description: The housenumber of the street.
        type: string
        minLength: 1
        maxLength: 35
      city:
        description: The city of the address.
        type: string
        minLength: 1
        maxLength: 35
      zip:
        description: The zip of the address.
        type: string
        minLength: 3
        maxLength: 10
      country:
        description: >-
          The country of the address. Format
          [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]
        type: string
        minLength: 2
        maxLength: 2
      state:
        description: The state of the address.
        type: string
        minLength: 1
        maxLength: 35
      phone:
        description: The phone of the address. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      fax:
        description: The fax of the address. limited to 16 characters!
        type: string
        minLength: 1
        maxLength: 16
      mobile:
        description: The mobile of the address. limited to 16 characters!
        type: string
      title:
        description: The title of the address.
        type: string
        minLength: 1
        maxLength: 35
      additionalDetails:
        description: Additional details for this address. This is a form free descriptor.
        type: string
        minLength: 1
        maxLength: 255
  CustomerPaymentInstrumentRelation:
    title: CustomerPaymentInstrumentRelation
    type: object
    properties:
      paymentInstrumentId:
        description: >-
          The identifier of a paymentinstrument which will be connected to the
          customer.
        type: string
        minLength: 1
        maxLength: 255
    required:
      - paymentInstrumentId
  PaymentInstrumentPayment:
    title: PaymentInstrumentPayment
    type: object
    properties:
      cardNumber:
        description: >-
          The Creditcard PAN used to proceed. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 12
        maxLength: 19
      country:
        description: >-
          The country which is used. (mandatory for klarna)
        type: string
        minLength: 2
        maxLength: 2
      currency:
        description: >-
          The currency which is used. (mandatory for klarna)
        type: string
        minLength: 3
        maxLength: 3
      locale:
        description: >-
          The locale which is used. (mandatory for klarna)
        type: string
      verification:
        description: >-
          The verification number of the creditcard. (mandatory for creditcard,
          optional if a creditcard paymentInstrumentId was passed)
        type: string
        minLength: 3
        maxLength: 4
      expiryMonth:
        description: >-
          The expiry month of the creditcard. Format: 01 -> january, 02 ->
          February, etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      expiryYear:
        description: >-
          The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002,
          etc. (mandatory for creditcard, optional if a creditcard
          paymentInstrumentId was passed)
        type: string
        minLength: 2
        maxLength: 2
      cardHolder:
        description: The full name of the cardholder.
        type: string
        minLength: 3
        maxLength: 128
      bankName:
        description: >-
          The name of the bank of the SEPA account. (mandatory for sepa,
          optional if a sepa paymentInstrumentId was passed)
        type: string
        minLength: 1
        maxLength: 255
      iban:
        description: >-
          IBAN of the SEPA account. (mandatory for sepa, optional if a sepa
          paymentInstrumentId was passed)
        type: string
        maxLength: 34
      bic:
        description: >-
          BIC of the SEPA account. (mandatory for sepa, optional if a sepa
          paymentInstrumentId was passed)
        type: string
        minLength: 8
        maxLength: 11
      accountHolder:
        description: >-
          The account holders name of the SEPA account. (mandatory for sepa,
          optional if a sepa paymentInstrumentId was passed)
        type: string
        minLength: 4
        maxLength: 128
      customer:
        description: ID of the customer
        type: string
      mandate:
        $ref: '#/definitions/MandateRequest'
      basket:
        $ref: '#/definitions/BasketRequest'
      returnUrl:
        description: >-
          Only for PayPal (mandatory) - The URL to which to redirect the customer when he or she accepts an agreement.
        type: string
        minLength: 6
        maxLength: 2048
      cancelUrl:
        description: >-
          Only for PayPal (mandatory) - The URL to which to redirect the customer when he or she cancels an agreement.
        type: string
        minLength: 6
        maxLength: 2048
      notifyUrl:
        description: >-
          Only for PayPal (optional) - The URL at which the instant payment notifications (IPN) are sent to notify
          the merchant when the agreement is created or canceled or payments on the agreement are processed.
        type: string
        minLength: 6
        maxLength: 2048
  PaymentInstrumentRequest:
    title: PaymentInstrumentRequest
    type: object
    properties:
      type:
        $ref: '#/definitions/ProductEnum'
      merchantPaymentInstrumentId:
        description: >-
          The identifier of the paymentinstrument on your system. Created by
          you. limited to 100 characters.
        type: string
        minLength: 1
        maxLength: 255
      payment:
        $ref: '#/definitions/PaymentInstrumentPayment'
    required:
      - type
  PaymentInstrumentUpdateRequest:
    title: PaymentInstrumentUpdateRequest
    type: object
    properties:
      type:
        description: Type of the selected payment method provided by Klarna. E.g. klarna-pay-later
        type: string
      verification:
        description: 'The verification number of the creditcard. (CC only)'
        type: string
        minLength: 3
        maxLength: 4
      expiryMonth:
        description: 'The expiry month of the creditcard. (CC only)'
        type: string
      expiryYear:
        description: 'The expiry year of the creditcard. (CC only)'
        type: string
      cardHolder:
        description: 'The name of the creditcard holder. (CC only)'
        type: string
      bankName:
        description: 'The name of the bank. (SEPA only)'
        type: string
      bic:
        description: 'The BIC of the bank. (SEPA only)'
        type: string
      accountHolder:
        description: 'The name of the bank account holder. (SEPA only)'
        type: string
      country:
        description: 'Country which is used'
        type: string
        minLength: 2
        maxLength: 2
      currency:
        description: 'Currency which is used'
        type: string
        minLength: 3
        maxLength: 3
      locale:
        description: 'Locale which is used'
        type: string
      customer:
        description: 'The id of the customer'
        type: string
      billingAddress:
        description: 'The id of the billing address'
        type: string
      shippingAddress:
        description: 'The id of the shipping address'
        type: string
      mandate:
        $ref: '#/definitions/MandateRequest'
      basket:
        $ref: '#/definitions/BasketRequest'
      notifyUrl:
        description: >-
          Only for PayPal (mandatory) - The URL at which the instant payment notifications (IPN) are sent to notify
          the merchant when the agreement is created or canceled or payments on the agreement are processed.
        type: string
        minLength: 6
        maxLength: 2048
  DeviceIdentRequest:
    title: DeviceIdentRequest
    type: object
    properties:
      deviceIdentToken:
        type: string
        maxLength: 128
  DeviceIdentResponse:
    title: DeviceIdentResponse
    type: object
    properties:
      token:
        type: string
      fraudscore:
        type: number
      fraudscoreRaw:
        type: number
      ruleScores:
        type: string
      fraudscoreRulematches:
        type: string
      city:
        type: string
      ip:
        type: string
      regioncode:
        type: string
      continent:
        type: string
      countryname:
        type: string
      regionname:
        type: string
      countrycode:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      exactidCreated:
        type: string
      smartidCreated:
        type: string
      exactid:
        type: string
      confidencelevel:
        type: number
      smartid:
        type: string
      confidencelevelhistory:
        type: number
      verifiedOs:
        type: string
      deviceType:
        type: string
      languages:
        type: string
  MetaRequest:
    title: MetaRequest
    type: object
    description: Contains specific information for different payment methods.
    properties:
      invoicing:
        $ref: '#/definitions/Invoicing'
      preferredLanguage:
        type: string
        description: >-
          Works with RatePay, iDEAL, Alipay, Bancontact and WeChat Pay.
          Two-letter language code, lower case.
        maxLength: 2
      referenceId:
        type: string
        description: RatePAY specific parameter.
        maxLength: 255
      addressOverride:
        type: boolean
        description: >-
          Paypal specific parameter. If false the shipping address passed with the request
          will be editable on the paypal site. Default value is true.
      tan:
        type: string
        description: >-
          Second factor for online bank transfer based refunds
      mobileView:
        type: boolean
        description: >-
          Set to true for the mobile enabled variant of Alipay.
      threeDsData:
        $ref: '#/definitions/ThreeDsMetaRequest'
  ThreeDsMetaRequest:
    title: ThreeDsMetaRequest
    type: object
    properties:
      threeDsAuthenticationId:
        type: string
        example: authentication_abc123xyz9
        description: >-
          Id of successful 3DS authentication<br/><br/>
          Use case: Order based on standalone 3DS authentication
      browserInfoId:
        type: string
        example: browserInfo_e1f6b193df
        description: >-
          Payengine identifier of the browser info object<br/><br/>
          Use case: 3DS authentication as part of the order
      threeDsVersionId:
        type: string
        example: threedsversion_123abc456z
        description: >-
          Payengine identifier of the 3DS version object<br/><br/>
          Use case: 3DS authentication as part of the order
      version:
        type: string
        example: '2.0'
        description: >-
          Parameter indicating the version of the 3DS<br/><br/>
          Use case: Order based on delegated 3DS authentication
      transactionId:
        type: string
        example: 8a880dc0-d2d2-4067-bcb1-b08d1690b26e
        description: >-
          The transaction identifier from the 3DS authentication<br/><br/>
          3DS 1.0: This will be the XID<br/><br/>
          3DS 2.0: This will be the dsTransID<br/><br/>
          Use case: Order based on delegated 3DS authentication
      authenticationValue:
        type: string
        example: MTIzNDU2Nzg5MDA5ODc2NTQzMjE=
        description: >-
          The authenticationValue returned in the 3DS authentication<br/><br/>
          CAVV: Visa, AMEX, JCB, Diners/Discover<br/><br/>
          UCAF: Mastercard<br/><br/>
          Use case: Order based on delegated 3DS authentication
      eci:
        type: string
        example: '05'
        description: >-
          The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder. The ECI values might differ depending on the card scheme.<br/>
          For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/>
          Mastercard<br/>
            00 - no authentication available<br/>
            01 - authentication attempted<br/>
            02 - fully authenticated<br/>
            07 - fully authenticated&#42;<sup>1</sup><br/><br/>
          All other card schemes<br/>
            05 - fully authenticated<br/>
            06 - authentication attempted<br/>
            07 - no authentication available<br/><br/>
          &#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 02).<br/><br/>
          Use case: Order based on delegated 3DS authentication
  Invoicing:
    title: Invoicing
    type: object
    properties:
      invoiceId:
        description: For PayPal only this parameter is used.
        type: string
        maxLength: 50
      invoiceDate:
        description: >-
          Timestamp - earliest - 7 days before request, latest - day of request.
        type: integer
      deliveryDate:
        description:  >-
          Timestamp - earliest - 365 days before request, latest - 365 days after request.
        type: integer
      dueDate:
        description:  >-
          Timestamp - not before date of request AND not before invoice-date (if present).
        type: integer
  Tracking:
    title: Tracking
    type: object
    properties:
      trackingId:
        type: string
        maxLength: 50
      provider:
        type: string
        enum:
          - DPD
          - GLS
          - DHL
          - HLG
          - HVS
          - UPS
          - TNT
          - OTH
  ProductEnum:
    title: productEnum
    type: string
    description: The product which is represented by a paymentinstrument.
    enum:
      - creditcard
      - sepa
      - klarna
      - paypal
  AddressList:
    title: AddressList
    type: object
    properties:
      elements:
        description: A list of addresses.
        type: array
        items:
          $ref: '#/definitions/AddressResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  PersonaList:
    title: PersonaList
    type: object
    properties:
      elements:
        description: A list of personas.
        type: array
        items:
          $ref: '#/definitions/PersonaResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  CustomerList:
    title: CustomerList
    type: object
    properties:
      elements:
        description: A list of customers.
        type: array
        items:
          $ref: '#/definitions/CustomerResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  PaymentInstrumentList:
    title: PaymentInstrumentList
    type: object
    properties:
      elements:
        description: A list of paymeninstruments.
        type: array
        items:
          $ref: '#/definitions/PaymentInstrumentResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  OrderList:
    title: OrderList
    type: object
    properties:
      elements:
        description: A list of orders.
        type: array
        items:
          $ref: '#/definitions/OrderResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  TransactionList:
    title: TransactionList
    type: object
    properties:
      elements:
        description: A list of transactions.
        type: array
        items:
          $ref: '#/definitions/TransactionResponseParent'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  PaymentInstrumentType:
    title: PaymentInstrumentType
    type: string
    description: the type of the payment instrument
    enum:
      - sepa
      - creditcard
      - paypal
      - paydirekt
      - bank-transfer
  TransactionType:
    title: TransactionType
    type: string
    description: the type of the transaction
    enum:
      - PREAUTH
      - DEBIT
      - CANCEL
      - CAPTURE
      - REFUND
  ArticleTypeEnum:
    title: ArticleTypeEnum
    type: string
    description: This is the type of the article. Required for Klarna and optional for all other payment methods.
    enum:
      - physical
      - digital
      - discount
      - shipping_fee
      - gift_card
  OrdersCreditPostBadRequest:
    title: BadRequest
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersCreditPostErrors'
  OrdersDebitPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersDebitPostErrors'
  OrdersPreauthPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersPreauthPostErrors'
  OrdersTransactionsRefundPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsRefundPostErrors'
  OrdersTransactionsCapturePostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsCapturePostErrors'
  OrdersTransactionsCancelPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating order!
      code:
        type: number
        example: 12000
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsCancelPostErrors'
  OrdersTransactionsGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while loading transaction!
      code:
        type: number
        example: 14001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsGetErrors'
  OrdersTransactionsPatchBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while updating transaction!
      code:
        type: number
        example: 14002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsPatchErrors'
  OrdersTransactionsGetAllNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while loading transaction!
      code:
        type: number
        example: 14001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersTransactionsGetAllErrors'
  OrdersGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while loading order!
      code:
        type: number
        example: 12001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/OrdersGetErrors'
  CustomersPersonasGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while fetching persona!
      code:
        type: number
        example: 8002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPersonasGetErrors'
  CustomersPersonasGetAllBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while fetching persona!
      code:
        type: number
        example: 8002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPersonasGetAllErrors'
  CustomersPersonasPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating persona!
      code:
        type: number
        example: 8001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPersonasPostErrors'
  CustomersAddressesGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while loading address!
      code:
        type: number
        example: 6002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersAddressesGetErrors'
  CustomersAddressesGetAllBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while loading address!
      code:
        type: number
        example: 6002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersAddressesGetAllErrors'
  CustomersAddressesPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating persona!
      code:
        type: number
        example: 6001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersAddressesPostErrors'
  CustomersPaymentInstrumentsDeleteBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while removing payment instrument association!
      code:
        type: number
        example: 4011
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPaymentInstrumentsDeleteErrors'
  CustomersPaymentInstrumentsGetBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while fetching payment instrument!
      code:
        type: number
        example: 10001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPaymentInstrumentsGetErrors'
  CustomersPaymentInstrumentsPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while adding payment instrument association!
      code:
        type: number
        example: 4099
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPaymentInstrumentsPostErrors'
  CustomersGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while fetching customer!
      code:
        type: number
        example: 4002
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersGetErrors'
  CustomersPatchBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while updating customer!
      code:
        type: number
        example: 4003
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPatchErrors'
  CustomersPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating customer!
      code:
        type: number
        example: 4001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/CustomersPostErrors'
  PaymentInstrumentsGetNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      message:
        type: string
        example: Error while fetching payment instrument!
      code:
        type: number
        example: 10001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/PaymentInstrumentsGetErrors'
  PaymentInstrumentsPatchBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while updating payment instrument!
      code:
        type: number
        example: 10003
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/PaymentInstrumentsPatchErrors'
  PaymentInstrumentsPostBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: Error while creating payment instrument!
      code:
        type: number
        example: 10003
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/PaymentInstrumentsPostErrors'
  ThreeDsVersionBadRequest:
    type: object
    properties:
      status:
        type: number
        example: 400
      message:
        type: string
        example: There is problem with 3DS version request.
      code:
        type: number
        example: 25719
      globalTrackId:
        type: string
        example: Some Request ID
  SettlementResponse:
    title: SettlementResponse
    type: object
    properties:
      id:
        description: The identifier of the settlements. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      settlementsFile:
        description: Settlements file.
        type: string
        minLength: 1
        maxLength: 255
      product:
        description: Product
        type: string
        minLength: 1
        maxLength: 255
      receivedAt:
        description: This timestamp indicates the arrival of this settlement.
        type: number
        format: date-time
      fileName:
        description: Name of the file
        type: string
        minLength: 1
        maxLength: 255
      downloaded:
        description: Product
        type: boolean
      merchantId:
        description: Merchant Id
        type: string
        minLength: 1
        maxLength: 255
  TxReportResponse:
    title: TxReportResponse
    type: object
    properties:
      id:
        description: The identifier of the transaction report. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      reportDate:
        description: Timestamp indicates the date for which the report was generated and includes the transactions
        type: number
        format: date-time
      fileName:
        description: Name of the file
        type: string
        minLength: 1
        maxLength: 255
      reportType:
        description: The type of the transaction report ['daily',  'monthly']
        type: string
        minLength: 1
        maxLength: 255
      fileFormat:
        description: Format of the file ['csv', 'xlsx']
        type: string
        minLength: 1
        maxLength: 255
  BatchResponse:
    title: BatchResponse
    type: object
    properties:
      batchId:
        description: The identifier of the batch transaction. Created by payengine
        type: string
        minLength: 1
        maxLength: 255
      createdAt:
        description: This timestamp indicates the creation date.
        type: number
        format: date-time
      generatedAt:
        description: This timestamp indicates the generation date
        type: number
        format: date-time
      batchSequence:
        description: Match the number of operation line records in file header
        type: number
      version:
        description: Match the version in file header
        type: number
      batchRequestFileName:
        description: Uploaded file with batch transactions
        type: string
        minLength: 1
        maxLength: 255
      batchResponseFileName:
        description: Parsed result file with batch transactions
        type: string
        minLength: 1
        maxLength: 255
  SettlementsList:
    title: SettlementsList
    type: object
    properties:
      elements:
        description: A list of settlements.
        type: array
        items:
          $ref: '#/definitions/SettlementResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  Error:
    type: object
    properties:
      code:
        type: number
      field:
        type: string
      message:
        type: string
  SettlementsNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      code:
        type: number
        example: 50001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/SettlementsPatchErrors'
  TxReportList:
    title: TxReportList
    type: object
    properties:
      elements:
        description: A list of transaction reports.
        type: array
        items:
          $ref: '#/definitions/TxReportResponse'
      totalPages:
        description: A counter for the total pages returned.
        type: number
        format: int
        minimum: 1
    required:
      - elements
      - totalPages
  TxReportNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      code:
        type: number
        example: 50001
      globalTrackId:
        type: string
        example: Some Request ID
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/TxReportPatchErrors'
  BatchNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      code:
        type: number
        example: 70013
      globalTrackId:
        type: string
        example: Batch file with such id does not exist
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/BatchFileErrors'
  BatchResponseNotFound:
    type: object
    properties:
      status:
        type: number
        example: 404
      code:
        type: number
        example: 70014
      globalTrackId:
        type: string
        example: The result file is not available yet
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/BatchFileResultErrors'
  BatchUploadBadFile:
    type: object
    properties:
      code:
        type: number
        example: 70000
      globalTrackId:
        type: string
        example: Could not process batch file.
      elements:
        title: Errors
        type: array
        items:
          $ref: '#/definitions/BatchUploadError'
  BrowserInfoResponse:
    type: object
    properties:
      browserInfoId:
        type: string
        example: browserinfo_123xyz456a
        description: Payengine identifier of the browser info object
  BrowserInfo:
    type: object
    properties:
      acceptHeader:
        type:  string
        example: brw-accept-header
        description: >-
          Exact content of the HTTP accept headers as sent to the 3DS Requestor from the cardholder's browser.
          This field is limited to maximum 2048 characters and if the total length exceeds the limit, the 3DS Server truncates the excess portion.
      ip:
        type: string
        example: 192.168.0.1
        description: >-
          IP address of the browser as returned by the HTTP headers to the 3DS Requestor. The field is limited to maximum 45 characters and the accepted values are as following:
          - IPv4 address is represented in the dotted decimal format of 4 sets of decimal numbers separated by dots. The decimal number in each and every set is in the range 0 - 255.
          - IPv6 address is represented as eight groups of four hexadecimal digits, each group representing 16 bits (two octets). The groups are separated by colons (:).
      javaEnabled:
        type: boolean
        description: >-
          Boolean that represents the ability of the cardholder browser to execute Java.<br/>
          Value is returned from the navigator.javaEnabled property.
        example: true
      language:
        type: string
        example: en-US
        description: Value representing the browser language as defined in IETF BCP47. The value is limited to 1-8 characters.  Value is returned from navigator.language property.
      colorDepth:
        type: number
        example: 8
        minimum: 1
        maximum: 99
        description: Value representing the bit depth of the colour palette for displaying images, in bits per pixel. Obtained from Cardholder browser using the screen.colorDepth property.
      screenHeight:
        type: number
        minimum: 1
        maximum: 999999
        example: 100
        description: Total height of the Cardholder's screen in pixels. Value is returned from the screen.height property.
      screenWidth:
        type: number
        minimum: 1
        maximum: 999999
        example: 100
        description: Total width of the Cardholder's screen in pixels. Value is returned from the screen.width property.
      timezone:
        type: number
        minimum: 1
        maximum: 99999
        example: 60
        description: >-
          Time difference between UTC time and the Cardholder browser local time, in minutes. The field is limited to 1-5 characters where the value is returned from the getTimezoneOffset() method.
      userAgent:
        type: string
        maxLength: 2048
        example: Chrome/71.0.3578.98
        description: Exact content of the HTTP user-agent header.
      windowSize:
        type: string
        enum: ['01', '02', '03', '04', '05']
        example: '05'
        description: >-
          Dimensions of the challenge window that has been displayed to the Cardholder. The ACS shall reply with content that is formatted to appropriately render in this window to provide the best possible user experience.
          Preconfigured sizes are width X height in pixels of the window displayed in the Cardholder browser window. This is used only to prepare the CReq request and it is not part of the AReq flow. If not present it will be omitted.
          However, when sending the Challenge Request.
          Accepted values are:<br/>
          01 -> 250 x 400<br/>
          02 -> 390 x 400<br/>
          03 -> 500 x 600<br/>
          04 -> 600 x 400<br/>
          05 -> Full screen
  CofContractTypeEnum:
    title: CofContractTypeEnum
    type: string
    description: >-
      Credential on file type:
         * `ONECLICK` - The payment instrument is persisted, recurring and can be used for oneClick payments.
         * `UNSCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated unscheduled orders.
         * `SCHEDULED` - The payment instrument is persisted, recurring and can be used for merchant initiated scheduled or instalments orders.
    enum:
      - ONECLICK
      - UNSCHEDULED
      - SCHEDULED
  CofContractRequest:
    type: object
    description: >-
      The credentials on file (COF) contract object specifying the COF usage of the payment instrument. The presence of this object triggers an zero amount authorization (card check) for the given channel and type.
    properties:
      type:
        $ref: '#/definitions/CofContractTypeEnum'
      channel:
        type: string
        enum: [ECOM, MOTO]
        example: ECOM
        description: >-
          The channel (entry mode) via which the COF initial storage transaction is processed.

          If not passed it defaults to ECOM.
  CofContractResponse:
    type: object
    description: >-
      The credentials on file (COF) contract object specifying the COF usage of the payment instrument. The presence of this object triggers an zero amount authorization (card check) for the given channel and type.
    properties:
      id:
        type: string
        description: >-
          Unique identifier for the COF contract of the payment instrument.

          In case more than one COF type should be used for one paymentInstrument this identifier should be stored by the merchant and referenced in the payment transactions.
        example: contract_123abc456x
      type:
        $ref: '#/definitions/CofContractTypeEnum'
      channel:
        type: string
        enum: [ECOM, MOTO]
        example: ECOM
        description: >-
          The channel (entry mode) via which the COF initial storage transaction is processed.

          If not passed it defaults to ECOM.
      recurringExpiry:
        description: >-
          Date after which no further authorizations shall be performed. This field is only required in case of an authentication for recurring payments.
        type: string
        format: date
        example: '2019-07-10'
      recurringFrequency:
        description: >-
          Indicates the minimum number of days between authorizations. This field is only required in case of an authentication for recurring payments.
        type: number
        example: 30
  CardcheckRequest:
    type: object
    properties:
      cofContract:
        $ref: '#/definitions/CofContractRequest'
      threeDsData:
        $ref: '#/definitions/CardcheckThreeDsDataRequest'
  CardcheckThreeDsDataRequest:
    title: ThreeDsData
    type: object
    properties:
      threeDsAuthenticationId:
        type: string
        example: threeDsAuthentication_123abc987y
        description: >-
          Identifier of successful 3DS authentication done via Payengine used for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          Use case: COF initial storage based on standalone 3DS authentication
      version:
        type: string
        example: '2.0'
        description: >-
          Parameter indicating the version of the 3DS. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          Use case: COF initial storage based on delegated 3DS authentication
      transactionId:
        type: string
        example: 8a880dc0-d2d2-4067-bcb1-b08d1690b26e
        description: >-
          The transaction identifier from the 3DS authentication. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          3DS 1.0: This will be the XID<br/><br/>
          3DS 2.0: This will be the dsTransID<br/><br/>
          Use case: COF initial storage based on delegated 3DS authentication
      authenticationValue:
        type: string
        example: MTIzNDU2Nzg5MDA5ODc2NTQzMjE=
        description: >-
          The authenticationValue returned in the 3DS authentication. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          CAVV: Visa, AMEX, JCB, Diners/Discover<br/><br/>
          UCAF: Mastercard<br/><br/>
          Use case: COF initial storage based on delegated 3DS authentication
      eci:
        type: string
        example: '05'
        description: >-
          The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          The ECI values might differ depending on the card scheme.<br/>
          For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/>
          Mastercard<br/>
            00 - no authentication available<br/>
            01 - authentication attempted<br/>
            02 - fully authenticated<br/>
            07 - fully authenticated&#42;<sup>1</sup><br/><br/>
          All other card schemes<br/>
            05 - fully authenticated<br/>
            06 - authentication attempted<br/>
            07 - no authentication available<br/><br/>
          &#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 02).<br/><br/>
          Use case: COF initial storage based on delegated 3DS authentication
  CardcheckResponse:
    type: object
    properties:
      id:
        type: string
        description: A unique transaction identifier generated by the Payengine.
        example: cardcheck_abc123xyz4
      createdAt:
        type: number
        description: Timestamp when card check was initiated.
        example: 1562574062133
      modifiedAt:
        type: number
        description: Timestamp when card check was modified.
        example: 1562574062133
      status:
        type: string
        description: The status of the card check.
        enum: ['SUCCESS', 'FAILURE']
        example: 'SUCCESS'
      threeDsData:
        $ref: '#/definitions/CardcheckThreeDsDataResponse'
      cofContract:
        $ref: '#/definitions/CofContractResponse'
      errorDetails:
        $ref: '#/definitions/CardcheckErrorDetails'
  CardcheckThreeDsDataResponse:
    title: ThreeDsData
    type: object
    properties:
      threeDsAuthenticationId:
        type: string
        example: threeDsAuthentication_123abc987y
        description: >-
          Identifier of successful 3DS authentication done via Payengine used for the initial SCHEDULED or UNSCHEDULED COF transaction.
      version:
        type: string
        example: '2.0'
        description: Parameter indicating the version of the 3DS. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.
      transactionId:
        type: string
        example: 8a880dc0-d2d2-4067-bcb1-b08d1690b26e
        description: >-
          The transaction identifier from the 3DS authentication. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          3DS 1.0: This will be the XID<br/><br/>
          3DS 2.0: This will be the dsTransID
      authenticationValue:
        type: string
        example: MTIzNDU2Nzg5MDA5ODc2NTQzMjE=
        description: >-
          The authenticationValue returned in the 3DS authentication. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          CAVV: Visa, AMEX, JCB, Diners/Discover<br/><br/>
          UCAF: Mastercard
      eci:
        type: string
        example: '05'
        description: >-
          The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder. Used in case of externally done 3DS authentication for the initial SCHEDULED or UNSCHEDULED COF transaction.<br/><br/>
          The ECI values might differ depending on the card scheme.<br/>
          For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/>
          Mastercard<br/>
            00 - no authentication available<br/>
            01 - authentication attempted<br/>
            02 - fully authenticated<br/>
            07 - fully authenticated&#42;<sup>1</sup><br/><br/>
          All other card schemes<br/>
            05 - fully authenticated<br/>
            06 - authentication attempted<br/>
            07 - no authentication available<br/><br/>
          &#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 02).
  CardcheckErrorDetails:
    type: object
    description: Object containing error information in case of a FAILURE status.
    properties:
      providerCode:
        type: string
        description: Card processor code in case of an error.
        example: >-
          00
      providerMessage:
        type: string
        description: Card processor message in case of an error.
        example: Transaction Approved
  AuthenticationTransactionData:
    type: object
    description: Object containing transaction information
    properties:
      amount:
        type: number
        description: >-
          The amount of the purchase.<br/><br/>
          In case of an authentication without payment for recurring future payments this should include the expected total purchase amount.<br/><br/>
          The amount can be 0 for a RECURRING_CARDCHECK or ADD_CARD authentication.<br/><br/>
          The amount needs to be in the minor currency unit.
        example: 1000
      currency:
        description: 'The currency of the purchase according to https://en.wikipedia.org/wiki/ISO_4217'
        type: string
        minLength: 3
        maxLength: 3
        example: EUR
      recurringExpiry:
        description: >-
          Date after which no further authorizations shall be performed. This field is only required in case of an authentication for recurring payments.
        type: string
        format: date
        example: '2019-07-10'
      recurringFrequency:
        description: >-
          Indicates the minimum number of days between authorizations. This field is only required in case of an authentication for recurring payments.
        type: number
        example: 30
  RiskCustomerAccount:
    type: object
    description: An object containing information about the customer account with the merchant.
    properties:
      accountIdentifier:
        type: string
        description: The account identifier at the merchant side.
        example: customer-abc123
      creationDate:
        type: string
        format: date
        example: '2019-07-10'
        description: The date when the customer opened the account with the merchant.
      lastChangeDate:
        type: string
        format: date
        example: '2019-07-10'
        description: The date when the customer account with the merchant was last changed, including billing or shipping addres, new payment account or new user(s) added.
      changeIndicator:
        type: string
        enum: [CHANGED_WITH_THIS_TRANSACTION, LESS_THAN_THIRTY_DAYS, THIRTY_TO_SIXTY_DAYS, MORE_THAN_SIXTY_DAYS]
        example: CHANGED_WITH_THIS_TRANSACTION
        description: >-
          Length of the time since the customer account information with the merchant was last changed, including billing or shipping addres, new payment account or new user(s) added.
      lastPasswordChangeDate:
        type: string
        format: date
        example: '2019-07-10'
        description: The date when the customer account with the merchant had a password change or account reset.
      passwordChangeIndicator:
        type: string
        enum: [NO_CHANGE, CHANGED_WITH_THIS_TRANSACTION, LESS_THAN_THIRTY_DAYS, THIRTY_TO_SIXTY_DAYS, MORE_THAN_SIXTY_DAYS]
        example: LESS_THAN_THIRTY_DAYS
        description: Length of the time since the customer account information with the merchant had a password change or account reset.
      authenticationMethod:
        description: Mechanism used by the customer to authenticate to the merchant account.
        type: string
        enum: [GUEST, OWN_CREDENTIALS, FEDERATED_ID, ISSUER_CREDENTIALS, THIRD_PARTY_AUTH, FIDO_AUTHENTICATOR]
        example: OWN_CREDENTIALS
      authenticationTimestamp:
        description: Date and time in UTC of the customer authentication to the merchant account.
        type: string
        format: date-time
        example: '2019-07-10T15:04:09.722Z'
      shippingAddressUsageIndicator:
        type: string
        enum: [FIRST_TIME, LESS_THAN_THIRTY_DAYS, THIRTY_TO_SIXTY_DAYS, MORE_THAN_SIXTY_DAYS]
        example: LESS_THAN_THIRTY_DAYS
        description: Indicates when the shipping address used for this transaction was first used with the merchant account.
      shippingAddressFirstUsage:
        type: string
        format: date
        example: '2019-07-10'
        description: Date when the shipping address used for this transaction was first used with the merchant.
      transactionCountLastDay:
        type: number
        description: Number of transactions (successful and abandoned) for this customer account with the merchant across all payment accounts in the previous 24 hours.
        example: 1
      transactionCountLastYear:
        type: number
        description: Number of transactions (successful and abandoned) for this customer account with the merchant across all payment accounts in the previous year.
        example: 10
      orderCountLast6Months:
        type: number
        description: Number of purchases with this cardholder account during the previous six months.
        example: 5
      suspiciousActivity:
        type: boolean
        description: Indicates whether the merchant has experienced suspicious activity (including previous fraud) on the customer account.
        example: false
      accountEqualsShippingName:
        type: boolean
        description: Indicates if the customer name on the account is identical to the shipping name used for this transaction.
        example: true
      paymentAccountAgeIndicator:
        type: string
        enum: [NO_ACCOUNT, CREATED_WITH_THIS_TRANSACTION, LESS_THAN_THIRTY_DAYS, THIRTY_TO_SIXTY_DAYS, MORE_THAN_SIXTY_DAYS]
        description: Indicates the length of time that the payment account was enrolled in the customer account with the merchant.
      paymentAccountEnrollementDate:
        type: string
        format: date
        example: '2019-07-10'
        description: Date that the payment account was enrolled in the customer account with the merchant.
  RiskShippingInfo:
    type: object
    description: object containing information about the shipping details for this transaction.
    properties:
      shippingEqualsBillingAddress:
        type: boolean
        description: Flag if the shipping address equals the billing address.
        example: true
      shippingIndicator:
        type: string
        enum: [SHIP_TO_BILLING_ADDRESS, SHIP_TO_VERIFIED_ADDRESS, SHIP_TO_DIFFERENT_ADDRESS, SHIP_TO_STORE, DIGITAL_GOODS, TICKETS_NOT_SHIPPED, OTHER]
        example: SHIP_TO_BILLING_ADDRESS
        description: >-
          Indicates the shipping method chosen for the transaction. Merchants must choose the shipping indicator that most accurately describes the customer's specific transaction.
          If one or more items are included in the sale, use the shipping indicator for the physical goods, or if all digital goods, use the indicator that describes the most expensive item.
      deliveryTime:
        type: string
        enum: [ELECTRONIC, SAME_DAY, OVERNIGHT, TWO_DAY_OR_MORE]
        example: SAME_DAY
        description: Indicates the merchandise delivery timeframe.
      deliveryEmail:
        type: string
        description: For electronic delivery, the email address to which the merchandise was delivered.
        example: john@doe.com
  RiskOrderInfo:
    type: object
    description: object containing order information relevant for risk evaluation
    properties:
      isReorder:
        type: boolean
        description: Indicates whether the cardholder is reordering previously purchased merchandise.
        example: false
      preOrderIndicator:
        type: string
        enum: [MERCHANTDISE_AVAILABLE, FUTURE_AVAILABILITY]
        example: MERCHANTDISE_AVAILABLE
        description: Indicates whether Cardholder is placing an order for merchandise with a future availability or release date.
      preOrderDate:
        type: string
        format: date
        example: '2019-07-10'
        description: For a pre-ordered purchase, the expected date that the merchandise will be available.
      orderType:
        type: string
        enum: ['01', '03', '10', '11', '28']
        example: '01'
        description: >-
          Identifies the type of transaction being authenticated. The values are derived from ISO 8583.
          Accepted values are:
          01 -> Goods / Service purchase
          03 -> Check Acceptance
          10 -> Account Funding
          11 -> Quasi-Cash Transaction
          28 -> Prepaid activation and Loan
  Risk:
    type: object
    description: An object containing information relevant for risk analysis on the issuere side.
    properties:
      customerAccount:
        $ref: '#/definitions/RiskCustomerAccount'
      shippingInfo:
        $ref: '#/definitions/RiskShippingInfo'
      orderInfo:
        $ref: '#/definitions/RiskOrderInfo'
  AuthenticationRequestAsync:
    type: object
    description: An object containing the relevant URLs for asynchronous communication
    properties:
      notificationUrl:
        type: string
        example: https://my.notification.url
        description: URL where the result of the 3DS transaction will be sent to
      successUrl:
        type: string
        example: https://my.success.url
        description: URL where the end customer will be redirected to in case of challenge flow using the generated redirectUrl succeeded
      failureUrl:
        type: string
        example: https://my.failure.url
        description: URL where the end customer will be redirected to in case of challenge flow using the generated redirectUrl failed
  AuthenticationRequest:
    type: object
    properties:
      type:
        type: string
        description: >-
          The type of the authentication requested.<br/>
          PAYMENT_TRANSACTION: authentication with payment; the authentication is used for a normal payment transaction,<br/>
          RECURRING_TRANSACTION: authentication with payment; the authentication is used for an initial recurring payment transaction,<br/>
          RECURRING_CARDCHECK: authentication without payment; the authentication is used for a card check representing the initial recurring payment transaction,<br/>
          ADD_CARD: authentication without payment; the authentication is only used for the verification of stored card credentials, e.g. within a wallet,<br/>
          CARDHOLDER_VERIFICATION: authentication without payment; the authentication is used for the digital verification of the cardholder forcing a strong customer authentication
        enum: [PAYMENT_TRANSACTION, RECURRING_TRANSACTION, RECURRING_CARDCHECK, ADD_CARD, CARDHOLDER_VERIFICATION]
        example: PAYMENT_TRANSACTION
      customerId:
        type: string
        description: The identifier of a payengine customer.
        example: customer_abc123xyz1
      shippingAddressId:
        type: string
        description: The identifier of a payengine address.
        example: address_abc123xyz1
      billingAddressId:
        type: string
        description: The identifier of a payengine address.
        example: address_abc123xyz1
      transactionData:
        $ref: '#/definitions/AuthenticationTransactionData'
      risk:
        $ref: '#/definitions/Risk'
      browserInfoId:
        type: string
        description: Payengine identifier of the browser info object
        example: browserinfo_123abc456d
      async:
        $ref: '#/definitions/AuthenticationRequestAsync'
  AuthenticationResponse:
    type: object
    properties:
      id:
        type: string
        example: authentication_def456abc9
        description: Identifier of the 3DS authentication transaction generated by the Payengine
      createdAt:
        type: number
        description: Timestamp when the authentication was initiated.
        example: 1562769950956
      modifiedAt:
        type: number
        description: Timestamp when the authentication was modified.
        example: 1562769950956
      paymentInstrumentId:
        type: string
        example: paymentinstrument_pkekrrl5ua
        description: Identifier of the payment instrument used for the 3DS authentication.
      threeDsVersionId:
        type: string
        example: threedsversion_123def987a
        description: Identifier of the 3DS version info based on which the authentication was done.
      authenticationResult:
        $ref: '#/definitions/AuthenticationResult'
      type:
        type: string
        description: >-
          The type of the authentication requested.<br/>
          PAYMENT_TRANSACTION: authentication with payment; the authentication is used for a normal payment transaction,<br/>
          RECURRING_TRANSACTION: authentication with payment; the authentication is used for an initial recurring payment transaction,<br/>
          RECURRING_CARDCHECK: authentication without payment; the authentication is used for a card check representing the initial recurring payment transaction,<br/>
          ADD_CARD: authentication without payment; the authentication is only used for the verification of stored card credentials, e.g. within a wallet,<br/>
          CARDHOLDER_VERIFICATION: authentication without payment; the authentication is used for the digital verification of the cardholder forcing a strong customer authentication
        enum: [PAYMENT_TRANSACTION, RECURRING_TRANSACTION, RECURRING_CARDCHECK, ADD_CARD, CARDHOLDER_VERIFICATION]
        example: PAYMENT_TRANSACTION
      customerId:
        type: string
        description: The identifier of a payengine customer.
        example: customer_abc123xyz1
      shippingAddressId:
        type: string
        description: The identifier of a payengine address.
        example: address_abc123xyz1
      billingAddressId:
        type: string
        description: The identifier of a payengine address.
        example: address_abc123xyz1
      transactionData:
        $ref: '#/definitions/AuthenticationTransactionData'
      risk:
        $ref: '#/definitions/Risk'
      browserInfoId:
        type: string
        description: Payengine identifier of the browser info object
        example: browserinfo_123abc456d
      async:
        $ref: '#/definitions/AuthenticationRequestAsync'
  AuthenticationResult:
    type: object
    description: Object containing the result of the 3DS authentication transaction (final results will be available only in case of frictionless flow)
    properties:
      version:
        type: string
        description: Parameter indicating the version of the 3DS
        example: '2.0'
      status:
        type: string
        enum: ['Y', 'A', 'C', 'U', 'R', 'N']
        example: 'Y'
        description: >-
          Indicates whether a transaction qualifies as an authenticated transaction.<br/><br/>
          Y = authentication verification successful<br/>
          A = authentication attempted; not authenticated, but a proof of attempted authentication is provided<br/>
          C = challenge required; additional SCA authentication is required<br/>
          U = authentication could not be performed; technical or other problem<br/>
          R = authentication rejected; issuer is rejecting<br/>
          N = not authenticated; transaction denied
      redirectUrl:
        type: string
        example: https://link-the-hosted-challange.example
        description: >-
          Conditional - present in case of 3DS 1.0 and challenge flow for 3DS 2.0 redirect URL leading to hosted page by Payengine used for Cardholder authentication (main flow for 3DS 1.0 and fallback flow in case of challenge for 3DS 2.0)
      challengeData:
        $ref: '#/definitions/ChallengeData'
      transactionId:
        type: string
        example: d00b8de2-a2e4-11e9-a2a3-2a2ae2dbcce4
        description: >-
          The transaction identifier from the 3DS authentication

          3DS 1.0: This will be the XID

          3DS 2.0: This will be the dsTransID
      authenticationValue:
        type: string
        example: YXV0aGVudGljYXRpb25WYWx1ZQ==
        description: >-
          The authenticationValue returned in the 3DS authentication

          CAVV: Visa, AMEX, JCB, Diners/Discover

          UCAF: Mastercard
      eci:
        type: string
        description: >-
          The Electronic Commerce Indicator (ECI) provided by the ACS or DS to indicate the results of the attempt to authenticate the cardholder. The ECI values might differ depending on the card scheme.<br/>
          For all fully authenticated or authentication attempted transactions the liability will be shifted to the card issuer.<br/><br/>
          Mastercard<br/>
            00 - no authentication available<br/>
            01 - authentication attempted<br/>
            02 - fully authenticated<br/>
            07 - fully authenticated&#42;<sup>1</sup><br/><br/>
          All other card schemes<br/>
            05 - fully authenticated<br/>
            06 - authentication attempted<br/>
            07 - no authentication available<br/><br/>
          &#42;<sup>1</sup> - Mastercard distinguishes between fully authenticated recurring payments (flagged with ECI 07) and all other fully authenticated transactions (flagged with ECI 02).
        example: '05'
      errorDetails:
        $ref: '#/definitions/AuthenticationResultErrorData'
  AuthenticationResultErrorData:
    type: object
    description: >-
      Object containing error information in case of error.
    properties:
      providerCode:
        type: string
        example: 301
        description: Original error code from the 3DS server or mpi
      providerMessage:
        type: string
        example: TRANSACTION_ID_NOT_RECOGNIZED
        description: Original error message from the 3DS server or mpi
  ChallengeData:
    type: object
    description: Conditional - information available in case of CHALLENGE status, needed for building the challenge iFrame.
    properties:
      acsUrl:
        type: string
        description: >-
          Fully qualified URL of the ACS in case the authentication response message indicates that further cardholder interaction is required to complete the authentication.
          relevant for 3DS 2.0 only
        example: https://link-to-the-issuer.acs
      base64EncodedChallengeRequest:
        type: string
        example: Y2hhbGxhbmdlRGF0YQ==
        description: >-
          Base64-encoded Challenge Request object in case the authentication response message indicates that further Cardholder interaction is required to complete the authentication. (3DS 2.0)
      challengeWindowSize:
        type: string
        enum: ['01', '02', '03', '04', '05']
        example: '05'
        description: >-
          Dimensions of the challenge iframe window in which the challenge page will be displayed to the Cardholder. This value should match the provided size in the browserInfo call.

          EMVCo assigned window size.
          '01' -> 250px x 400px,
          '02' -> 390px x 400px,
          '03' -> 500px x 600px,
          '04' -> 600px x 400px,
          '05' -> Full screen, or full container content

          relevant for 3DS 2.0 only
  OrdersCreditPostErrors:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expeted: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12213
        field: terms
        message: "Field terms is missing. Expected: UNIX timestamp in ms."
      - code: 12214
        field: terms
        message: "Bad value for terms. Expected: UNIX timestamp in ms."
      - code: 12215
        field: privacy
        message: "Field privacy is missing. Expected: UNIX timestamp in ms."
      - code: 12216
        field: privacy
        message: "Bad value for privacy. Expected: UNIX timestamp in ms."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12218
        field: statementDescription
        message: "Bad value for statementDescription. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
      - code: 12237
        field: customer
        message: "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12238
        field: customer
        message: "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12239
        field: customer
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12240
        field: persona
        message: "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12241
        field: persona
        message: "Bad value for persona. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12242
        field: persona
        message: "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
      - code: 12243
        field: persona
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
      - code: 12244
        field: billingAddress
        message: "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12245
        field: billingAddress
        message: "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12246
        field: shippingAddress
        message: "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12247
        field: shippingAddress
        message: "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12248
        field: ipAddress
        message: "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12249
        field: ipAddress
        message: "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12250
        field: channel
        message: "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12251
        field: channel
        message: "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12252
        field: source
        message: "Bad value for source.  Expected: string of length between 1 and 128 characters."
      - code: 10201
        field: type
        message: "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
      - code: 10202
        field: type
        message: "Bad value for type. string value in ['sepa', 'creditcard']."
      - code: 12255 #10203
        field: payment
        message: "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 12264
        field: payment.riskIdentId
        message: "Field payment.riskIdentId is missing. Expected: string between 1 and 80 characters."
      - code: 12265
        field: payment.riskIdentId
        message: "Bad value for payment.riskIdentId. Expected: string between 1 and 80 characters."
      - code: 129999 #10204
        field: payment.{unexpected_field}
        message: "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 16000
        field: payment.cardNumber
        message: "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16001
        field: payment.cardNumber
        message: "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16002
        field: payment.verification
        message: "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16003
        field: payment.verification
        message: "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16004
        field: payment.expiryMonth
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16005
        field: payment.expiryMonth
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16006
        field: payment.expiryYear
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16007
        field: payment.expiryYear
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16008
        field: "payment.expiryMonth & payment.expiryYear"
        message: "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
      - code: 16009
        field: payment.cardHolder
        message: "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16010
        field: payment.cardHolder
        message: "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16016
        field: payment.accountHolder
        message: "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
  OrdersDebitPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12204
        field: async
        message: "Field async is missing. Expected: object of type Async."
      - code: 12205
        field: async.successUrl
        message: "Field async.successUrl is missing. Expected: string representing a valid URL."
      - code: 12206
        field: async.successUrl
        message: "Bad value for async.successUrl. Expected: string representing a valid URL."
      - code: 12207
        field: async.failureUrl
        message: "Field async.failureUrl is missing. Expected: string representing a valid URL."
      - code: 12208
        field: async.failureUrl
        message: "Bad value for async.failureUrl. Expected: string representing a valid URL."
      - code: 12209
        field: async.cancelUrl
        message: "Field async.cancelUrl is missing. Expected: string representing a valid URL."
      - code: 12210
        field: async.cancelUrl
        message: "Bad value for async.cancelUrl. Expected: string representing a valid URL."
      - code: 12211
        field: async.transactionType
        message: "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
      - code: 12212
        field: async.transactionType
        message: "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
      - code: 12213
        field: terms
        message: "Field terms is missing. Expected: UNIX timestamp in ms."
      - code: 12214
        field: terms
        message: "Bad value for terms. Expected: UNIX timestamp in ms."
      - code: 12215
        field: privacy
        message: "Field privacy is missing. Expected: UNIX timestamp in ms."
      - code: 12216
        field: privacy
        message: "Bad value for privacy. Expected: UNIX timestamp in ms."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12218
        field: statementDescription
        message: "Bad value for statementDescription. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
      - code: 12237
        field: customer
        message: "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12238
        field: customer
        message: "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12239
        field: customer
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12240
        field: persona
        message: "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12241
        field: persona
        message: "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12242
        field: persona
        message: "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
      - code: 12243
        field: persona
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
      - code: 12244
        field: billingAddress
        message: "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12245
        field: billingAddress
        message: "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12246
        field: shippingAddress
        message: "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12247
        field: shippingAddress
        message: "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12248
        field: ipAddress
        message: "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12249
        field: ipAddress
        message: "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12250
        field: channel
        message: "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12251
        field: channel
        message: "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12252
        field: source
        message: "Bad value for source.  Expected: string of length between 1 and 128 characters."
      - code: 10201
        field: type
        message: "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
      - code: 10202
        field: type
        message: "Bad value for type. string value in ['sepa', 'creditcard']."
      - code: 12255 #10203
        field: payment
        message: "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 12998
        field: payment.riskIdentId
        message: "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
      - code: 129999 #10204
        field: payment.{unexpected_field}
        message: "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 16000
        field: payment.cardNumber
        message: "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16001
        field: payment.cardNumber
        message: "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16002
        field: payment.verification
        message: "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16003
        field: payment.verification
        message: "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16004
        field: payment.expiryMonth
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12 representing the month in a valid creditcard expiry date."
      - code: 16005
        field: payment.expiryMonth
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16006
        field: payment.expiryYear
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16007
        field: payment.expiryYear
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16008
        field: "payment.expiryMonth & payment.expiryYear"
        message: "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
      - code: 16009
        field: payment.cardHolder
        message: "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16010
        field: payment.cardHolder
        message: "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16011
        field: payment.bankName
        message: "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
      - code: 16012
        field: payment.iban
        message: "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16013
        field: payment.iban
        message: "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16014
        field: payment.bic
        message: "Field payment.bic is missing. Expected: string of length 8 or 11 representing a valid BIC representing a valid german BIC."
      - code: 16015
        field: payment.bic
        message: "Bad value for payment.bic. Expected: string of length 8 or 11 representing a valid german BIC."
      - code: 16016
        field: payment.accountHolder
        message: "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
      - code: 16031
        field: payment.countryCode
        message: "Bad value for  payment.countryCode. Expected: 2 characters as per ISO 3166-1 alpha-2. Example: DE"
  OrdersPreauthPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12204
        field: async
        message: "Field async is missing. Expected: object of type Async."
      - code: 12205
        field: async.successUrl
        message: "Field async.successUrl is missing. Expected: string representing a valid URL."
      - code: 12206
        field: async.successUrl
        message: "Bad value for async.successUrl. Expected: string representing a valid URL."
      - code: 12207
        field: async.failureUrl
        message: "Field async.failureUrl is missing. Expected: string representing a valid URL."
      - code: 12208
        field: async.failureUrl
        message: "Bad value for async.failureUrl. Expected: string representing a valid URL."
      - code: 12209
        field: async.cancelUrl
        message: "Field async.cancelUrl is missing. Expected: string representing a valid URL."
      - code: 12210
        field: async.cancelUrl
        message: "Bad value for async.cancelUrl. Expected: string representing a valid URL."
      - code: 12211
        field: async.transactionType
        message: "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
      - code: 12212
        field: async.transactionType
        message: "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
      - code: 12213
        field: terms
        message: "Field terms is missing. Expected: UNIX timestamp in ms."
      - code: 12214
        field: terms
        message: "Bad value for terms. Expected: UNIX timestamp in ms."
      - code: 12215
        field: privacy
        message: "Field privacy is missing. Expected: UNIX timestamp in ms."
      - code: 12216
        field: privacy
        message: "Bad value for privacy. Expected: UNIX timestamp in ms."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12218
        field: statementDescription
        message: "Bad value for statementDescription. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
      - code: 12237
        field: customer
        message: "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12238
        field: customer
        message: "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12239
        field: customer
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
      - code: 12240
        field: persona
        message: "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12241
        field: persona
        message: "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
      - code: 12242
        field: persona
        message: "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
      - code: 12243
        field: persona
        message: "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
      - code: 12244
        field: billingAddress
        message: "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12245
        field: billingAddress
        message: "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12246
        field: shippingAddress
        message: "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12247
        field: shippingAddress
        message: "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
      - code: 12248
        field: ipAddress
        message: "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12249
        field: ipAddress
        message: "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
      - code: 12250
        field: channel
        message: "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12251
        field: channel
        message: "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
      - code: 12252
        field: source
        message: "Bad value for source.  Expected: string of length between 1 and 128 characters."
      - code: 10201
        field: type
        message: "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
      - code: 10202
        field: type
        message: "Bad value for type. string value in ['sepa', 'creditcard']."
      - code: 12255 #10203
        field: payment
        message: "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 12998
        field: payment.riskIdentId
        message: "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
      - code: 129999 #10204
        field: payment.{unexpected_field}
        message: "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 16000
        field: payment.cardNumber
        message: "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16001
        field: payment.cardNumber
        message: "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16002
        field: payment.verification
        message: "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16003
        field: payment.verification
        message: "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16004
        field: payment.expiryMonth
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16005
        field: payment.expiryMonth
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16006
        field: payment.expiryYear
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16007
        field: payment.expiryYear
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16008
        field: "payment.expiryMonth & payment.expiryYear"
        message: "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
      - code: 16009
        field: payment.cardHolder
        message: "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16010
        field: payment.cardHolder
        message: "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16011
        field: payment.bankName
        message: "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
      - code: 16012
        field: payment.iban
        message: "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16013
        field: payment.iban
        message: "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16014
        field: payment.bic
        message: "Field payment.bic is missing. Expected: string of length 8 or 11 representing a valid BIC representing a valid german BIC."
      - code: 16015
        field: payment.bic
        message: "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
      - code: 16016
        field: payment.accountHolder
        message: "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
  OrdersTransactionsRefundPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
  OrdersTransactionsCapturePostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
  OrdersTransactionsCancelPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
  OrdersTransactionsGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12101
        field: orderId
        message: "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
      - code: 14101
        field: transactionId
        message: "A Transaction with specified id can not be found. Expected: A valid string identifier representing a Transaction object between 1 and 255 characters."
  OrdersTransactionsPatchErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12101
        field: orderId
        message: "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
      - code: 14101
        field: transactionId
        message: "A Transaction with specified id can not be found. Expected: A valid string identifier representing a Transaction object between 1 and 255 characters."
      - code: 12200
        field: initialAmount
        message: "Field initialAmount is missing.  Expected: Positive integer between 1 and 999999999999999999."
      - code: 12201
        field: initialAmount
        message: "Bad value for initialAmount. Expected: Positive integer between 1 and 999999999999999999."
      - code: 12202
        field: currency
        message: "Field currency is missing. Expected: string value in ['EUR']."
      - code: 12203
        field: currency
        message: "Bad value for currency. Expected: string value in ['EUR']."
      - code: 12217
        field: description
        message: "Bad value for description. Expected: string of length between 1 and 128."
      - code: 12219
        field: basket
        message: "Field basket is missing. Expected: array of type Item."
      - code: 12220
        field: basket
        message: "Bad value for basket. Expected: array of type Item."
      - code: 12221
        field: basket.item.name
        message: "Field basket.item.name is missing. Expected: string of length between 1 and 128."
      - code: 12222
        field: basket.item.name
        message: "Bad value for basket.item.name. Expected: string of length between 1 and 128."
      - code: 12223
        field: basket.item.articleNumber
        message: "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
      - code: 12224
        field: basket.item.articleNumber
        message: "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
      - code: 12225
        field: basket.item.totalPrice
        message: "Field basket.item.totalPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12226
        field: basket.item.totalPrice
        message: "Bad value for basket.item.totalPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12227
        field: basket.item.totalPriceWithTax
        message: "Field basket.item.totalPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12228
        field: basket.item.totalPriceWithTax
        message: "Bad value for basket.item.totalPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12229
        field: basket.item.tax
        message: "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
      - code: 12230
        field: basket.item.tax
        message: "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
      - code: 12231
        field: basket.item.unitPrice
        message: "Field basket.item.unitPrice is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12232
        field: basket.item.unitPrice
        message: "Bad value for basket.item.unitPrice. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12233
        field: basket.item.unitPriceWithTax
        message: "Field basket.item.unitPriceWithTax is missing. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12234
        field: basket.item.unitPriceWithTax
        message: "Bad value for basket.item.unitPriceWithTax. Expected: Integer between -999999999999999998 and 999999999999999999."
      - code: 12235
        field: basket.item.quantity
        message: "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
      - code: 12236
        field: basket.item.quantity
        message: "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
  OrdersTransactionsGetAllErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12101
        field: orderId
        message: "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
  OrdersGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 12101
        field: orderId
        message: "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
  CustomersPersonasGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
      - code: 8101
        field: personaId
        message: "A Persona with specified id can not be found. Expected: A valid string identifier representing a Persona object between 1 and 255 characters."
  CustomersPersonasGetAllErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
  CustomersPersonasPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 8201
        field: firstName
        message: "Field firstName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 8202
        field: firstName
        message: "Bad value for firstName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 8203
        field: lastName
        message: "Field lastName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 8204
        field: lastName
        message: "Bad value for lastName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 8205
        field: phone
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 8206
        field: fax
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 8207
        field: mobile
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 8208
        field: birthday
        message: "Bad value for 'birthday'. Expected: Milliseconds since epoch representing UTC Date."
      - code: 8209
        field: gender
        message: "Bad range for gender. Expected: string in ['MALE', 'FEMALE']."
      - code: 8210
        field: title
        message: "Bad value for title. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
  CustomersAddressesGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
      - code: 6101
        field: addressId
        message: "An Address with specified id can not be found. Expected: A valid string identifier representing an Address object between 1 and 255 characters."
  CustomersAddressesGetAllErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
  CustomersAddressesPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 6201
        field: firstName
        message: "Field firstName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6202
        field: firstName
        message: "Bad value for firstName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6203
        field: lastName
        message: "Field lastName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6204
        field: lastName
        message: "Bad value for lastName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6205
        field: street
        message: "Field street is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6206
        field: street
        message: "Bad value for street. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6207
        field: houseNumber
        message: "Field houseNumber is missing. Expected: string between 1 and 35 symbols, containing letters and digits."
      - code: 6208
        field: houseNumber
        message: "Bad value for houseNumber. Expected: string between 1 and 35 symbols, containing letters and digits."
      - code: 6209
        field: city
        message: "Field city is missing. Expected: string between 1 and 35 symbols, containing letters, digits, whitespaces and dashes."
      - code: 6210
        field: city
        message: "Bad value for city. Expected: string between 1 and 35 symbols, containing letters, digits, whitespaces and dashes."
      - code: 6211
        field: zip
        message: "Field zip is missing. Expected: string between 3 and 10 symbols, containing letters, digits, whitespaces and dashes."
      - code: 6212
        field: zip
        message: "Bad value for zip. Expected: string between 3 and 10 symbols, containing letters, digits, whitespaces and dashes."
      - code: 6213
        field: country
        message: "Field country is missing. Expected: string with size 2 symbols, according to ISO 3166-1 Alpha-2 code."
      - code: 6214
        field: country
        message: "Bad value for country. Expected: string with size 2 symbols, according to ISO 3166-1 Alpha-2 code."
      - code: 6215
        field: state
        message: "Bad value for state. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6216
        field: phone
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 6217
        field: fax
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 6218
        field: mobile
        message: "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
      - code: 6219
        field: title
        message: "Bad value for title. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
      - code: 6220
        field: additionalDetails
        message: "Bad value for additionalDetails. Expected: string between 1 and 255 symbols, containing letters, whitespaces and chars in ['.-]."
  CustomersPaymentInstrumentsDeleteErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
      - code: 10101
        field: paymentInstrumentId
        message: "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
  CustomersPaymentInstrumentsGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
  CustomersPaymentInstrumentsPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
      - code: 10101
        field: paymentInstrumentId
        message: "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
  CustomersGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
  CustomersPatchErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4101
        field: customerId
        message: "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
      - code: 4202
        field: merchantCustomerId
        message: "Bad value for merchantCustomerId. Expected: A valid unique string identifier between 1 and 255 characters."
      - code: 4203
        field: merchantCustomerId
        message: "Value for merchantCustomerId already exists. Expected: A valid unique string identifier between 1 and 255 characters."
  CustomersPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 4201
        field: email
        message: "Bad value for email. Expected: valid e-mail address between 1 and 254 characters."
      - code: 4298
        field: email
        message: "Field email already exists. Expected: unique valid e-mail address between 1 and 254 characters."
      - code: 4202
        field: merchantCustomerId
        message: "Bad value for merchantCustomerId. Expected: unique string between 1 and 255 characters."
      - code: 4203
        field: merchantCustomerId
        message: "Field merchantCustomerId already exists. Expected: unique string between 1 and 255 characters."
  PaymentInstrumentsGetErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 10101
        field: paymentInstrumentId
        message: "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
  PaymentInstrumentsPatchErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 10204
        field: verification
        message: "Field verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 10205
        field: verification
        message: "Bad value for verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
  PaymentInstrumentsPostErrors:
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 10201
        field: type
        message: "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
      - code: 10202
        field: type
        message: "Bad value for type. string value in ['sepa', 'creditcard']."
      - code: 10203
        field: payment
        message: "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 10204
        field: payment.{unexpected_field}
        message: "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
      - code: 16000
        field: payment.cardNumber
        message: "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16001
        field: payment.cardNumber
        message: "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
      - code: 16002
        field: payment.verification
        message: "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16003
        field: payment.verification
        message: "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
      - code: 16004
        field: payment.expiryMonth
        message: 16005
      - code: payment.expiryMonth
        field: "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
      - code: 16006
        field: payment.expiryYear
        message: "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16007
        field: payment.expiryYear
        message: "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
      - code: 16008
        field: "payment.expiryMonth & payment.expiryYear"
        message: "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
      - code: 16009
        field: payment.cardHolder
        message: "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16010
        field: payment.cardHolder
        message: "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
      - code: 16011
        field: payment.bankName
        message: "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
      - code: 16012
        field: payment.iban
        message: "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16013
        field: payment.iban
        message: "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
      - code: 16014
        field: payment.bic
        message: "Field payment.bic is missing. Expected: sstring of length 8 or 11 representing a valid BIC representing a valid german BIC."
      - code: 16015
        field: payment.bic
        message: "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
      - code: 16016
        field: payment.accountHolder
        message: "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
  SettlementsPatchErrors:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 50001
        message: "A Settlement with specified id can not be found. Expected: A valid string identifier representing a Settlement object between 1 and 255 characters."
  TxReportPatchErrors:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 50001
        message: "A Transaction report with specified id can not be found. Expected: A valid string identifier representing a Transaction report object between 1 and 255 characters."
  BatchFileErrors:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 70013
        message: "Batch file with such id does not exist."
  BatchFileResultErrors:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 70014
        message: "The result file is not available yet."
  BatchUploadError:
    title: Error
    type: array
    items:
      $ref: '#/definitions/Error'
    example:
      - code: 70009
        message: "Sequence number from filename doesn't match the file header."
      - code: 70015
        message: "Batch file with this sequence number already exists."
