{
  "swagger": "2.0",
  "info": {
    "title": "Payengine Public",
    "description": "Documentation for Payengine API v1.0\n",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "https://apitest.payengine.de",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/health": {
      "get": {
        "description": "Endpoint that reports an aggregated boolean value describing the general health of the system.\n",
        "tags": [
          "health"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The system health is successfully measured.",
            "schema": {
              "$ref": "#/definitions/HealthResponse"
            }
          },
          "403": {
            "description": "The health endpoint is disabled via configuration."
          }
        }
      }
    },
    "/orders/credit": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a credit transaction.\nInitialise a transaction and book an amount. The creditor is the customer and the debitor is the merchant.\nCredit transaction is always processed synchronously, 'channel' has to be MOTO.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersCredit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a credit transaction.",
            "schema": {
              "$ref": "#/definitions/OrderCreditRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersCreditPostBadRequest"
            }
          }
        }
      }
    },
    "/orders/debit": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a debit.\n\nThe debit transaction is a initial transaction to create an order. It is directly booking the initialAmount (No capture needed to receive the funds).\n\nThere are 2 workflows to process an order: ASYNC and SYNC.\n\nWith SYNC payment methods the transaction will directly result in a SUCCESS or a negative status.\n\nWith ASYNC payment methods the transaction will result in a PENDING or a negative status. If the status of the transaction is in PENDING the response will contain a redirectUrl.\n\nThe merchant system needs to redirect the shopper to the redirectUrl. After the shopper completes the payment action the transaction status will change to SUCCESS or a negative status.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersDebit",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a debit.",
            "schema": {
              "$ref": "#/definitions/OrderOpenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersDebitPostBadRequest"
            }
          }
        }
      }
    },
    "/orders/preauth": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a preauth.\n\nThe preauth transaction is a initial transaction to create an order. It is not directly booking the initialAmount (A capture is needed to receive the funds).\n\nThere are 2 workflows to process an order: ASYNC and SYNC.\n\nWith SYNC payment methods the transaction will directly result in a OK/SUCCESS or a negative status.\n\nWith ASYNC payment methods the transaction will result in a PENDING or FAILURE/DECLINED/ABORTED status. If the status of the transaction is in PENDING the response will contain a redirectUrl.\n\nThe merchant system needs to redirect the shopper to the redirectUrl. After the shopper completes the payment action the transaction status will change to OK or a negative status.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersPreauth",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a preauth.",
            "schema": {
              "$ref": "#/definitions/OrderOpenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersPreauthPostBadRequest"
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions/{transactionId}/refund": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a refund on a debit or capture transaction.\n\nA refund transaction can be applied on an existing debit or capture transaction in the status SUCCESS.\n\nIt can be used to refund the shopper with the given initialAmont.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsRefundByOrderId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected transaction. note: it must be a capture or a debit."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a refund.",
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsRefundPostBadRequest"
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions/{transactionId}/capture": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a capture on a preauth transaction.\n\nA capture transaction can be applied on an existing and not expired preauth transaction in the status SUCCESS.\n\nIt can be used to capture the given initialAmount and can not be higher then the initialAmount of the given preauth transaction.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsCaptureByOrderId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected transaction. note: it must be a preauth."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a capture.",
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/CaptureResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsCapturePostBadRequest"
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions/{transactionId}/cancel": {
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a cancel on a preauth transaction.\n\nA cancel transaction can be applied on an existing and not expired preauth transaction in the status SUCCESS.\n\nIt can be used to cancel the given initialAmount and can not be higher then the initialAmount of the given preauth transaction.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsCancelByOrderId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected transaction. note: it must be a preauth."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a cancel",
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsCancelPostBadRequest"
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions/{transactionId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a specific transaction.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsByOrderId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific transaction."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsGetNotFound"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to update a specific transaction.\n\nCurrently only available for non captured preauth transactions for the following payment methods: ratepay-invoice, ratepay-directdebit and ratepay-installment.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsByOrderId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific transaction."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for updating a transaction",
            "schema": {
              "$ref": "#/definitions/TransactionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/TransactionResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsPatchBadRequest"
            }
          }
        }
      }
    },
    "/orders/{orderId}/transactions": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to get a list of all transactions for a specific order.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersTransactionsByOrderId2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the affected order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/TransactionList"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersTransactionsGetAllNotFound"
            }
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to get a specific order.\n\nThe  object represents an order and includes multiple transactions for different actions ( preauth, debit, capture, cancel, refund).\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersByOrderId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/OrderList"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/OrdersGetNotFound"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to update an order.\n\nOnly available for orders in status CREATED.\n",
        "tags": [
          "orders"
        ],
        "operationId": "OrdersByOrderId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific order."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for updating an order.",
            "schema": {
              "$ref": "#/definitions/OrderUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of orders.\n\nThe following parameters can be used as filter.\n\n- terms\n\n- privacy\n\n- orderId\n\n- merchantOrderId\n\n- paymentProviderTransactionId\n\n- initialAmount\n\n- currency\n\n- customerId\n\n- ipAddress\n\n- status\n\n- channel\n\n- source\n\n- product\n\n- settled\n\n- settlementDate\n\n- createdAt\n\n- modifiedAt\n\nThe following parameters can be used as a range filter.\n\nDates\n\n- terms\n\n- privacy\n\n- settlementDate\n\n- createdAt\n\n- modifiedAt\n\nNumbers\n\n- initialAmount\n",
        "tags": [
          "orders"
        ],
        "operationId": "Orders",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/OrderList"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create an order intent ( order with status CREATED)\n\nAn order with this status will not result in any charges, untill executed. The actual execution is done by some of the integration components (e.g. widget)\n",
        "tags": [
          "orders"
        ],
        "operationId": "Orders1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body to create a order intent.",
            "schema": {
              "$ref": "#/definitions/OrderCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/OrderResponse"
            }
          }
        }
      }
    },
    "/customers/{customerId}/personas/{personaId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a specific persona connected to a given customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPersonasByCustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "personaId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific persona."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PersonaResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPersonasGetNotFound"
            }
          }
        }
      }
    },
    "/customers/{customerId}/personas": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of personas for a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPersonasByCustomerId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/PersonaList"
            }
          },
          "400": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPersonasGetAllBadRequest"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a new persona for a specific customer.\n\nPersonas contain person related attributes of a customer which are needed to process some payment methods.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPersonasByCustomerId2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body to create a new persona.",
            "schema": {
              "$ref": "#/definitions/PersonaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PersonaResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPersonasPostBadRequest"
            }
          }
        }
      }
    },
    "/customers/{customerId}/addresses/{addressId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a specific address of a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersAddressesByCustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific address."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersAddressesGetNotFound"
            }
          }
        }
      }
    },
    "/customers/{customerId}/addresses": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of addresses of a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersAddressesByCustomerId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/AddressList"
            }
          },
          "400": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersAddressesGetAllBadRequest"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a new address for a specific customer.\n\nAddresses containing address related attributes of a customer which are needed to process some payment methods.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersAddressesByCustomerId2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body to create a new address.",
            "schema": {
              "$ref": "#/definitions/AddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersAddressesPostBadRequest"
            }
          }
        }
      }
    },
    "/customers/{customerId}/payment-instruments/{paymentInstrumentId}": {
      "delete": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to delete a specific paymentinstrument from a customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPaymentInstrumentsByCustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific paymentinstrument."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPaymentInstrumentsDeleteBadRequest"
            }
          }
        }
      }
    },
    "/customers/{customerId}/payment-instruments": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of paymentinstrument of a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPaymentInstrumentsByCustomerId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentList"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPaymentInstrumentsGetBadRequest"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to assign a paymentinstrument to a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersPaymentInstrumentsByCustomerId2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for creating a new paymentinstrument.",
            "schema": {
              "$ref": "#/definitions/CustomerPaymentInstrumentRelation"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "400": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPaymentInstrumentsPostBadRequest"
            }
          }
        }
      }
    },
    "/customers/{customerId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersByCustomerId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/CustomerResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersGetNotFound"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to update a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "CustomersByCustomerId1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body for updating a customer.",
            "schema": {
              "$ref": "#/definitions/CustomerUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/CustomerResponse"
            }
          },
          "400": {
            "description": "Bad value caused by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPatchBadRequest"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to delete a specific customer.\n",
        "tags": [
          "customers"
        ],
        "operationId": "DeleteCustomerByCustomerId",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific customer."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersGetNotFound"
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of customers.\n\nThe following parameters can be used as filter.\n\n- customerId\n\n- email\n\n- merchantCustomerId\n\n- createdAt\n\n- modifiedAt\n\nThe following parameters can be used as a range filter.\n\n- createdAt\n\n- modifiedAt\n",
        "tags": [
          "customers"
        ],
        "operationId": "Customers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/CustomerList"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to create a new customer.\n\nA customer acts as a container for customer specific personas and addresses.\n\nIf the email address of the given customer is already known to the platform the API will respond with HTTP status 200 OK.\n\nFor every new created customer the platform will respond with the HTTP status 201 CREATED\n",
        "tags": [
          "customers"
        ],
        "operationId": "Customers1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body to create a new customer.",
            "schema": {
              "$ref": "#/definitions/CustomerRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/CustomerResponse"
            }
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/CustomersPostBadRequest"
            }
          }
        }
      }
    },
    "/payment-instruments/{paymentInstrumentId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a specific paymentinstrument.\n\nPayment instruments are objects representing the payment information used by the end customer.\n\nA payment instrument can be created either explicitly ( creditcard & sepa via javascript bridge ) or implicitly with a debit or preauth transaction.\n\nDepending on the type, payment instruments have different attributes, whereas some values will be masked to remain PCI conform ( e.g. creditcard number)\n\nPayment instruments can be used for recurring payments, if the flag \"recurring\" is set to true.\n\nPayment instruments are unique ( e.g. if a creditcard number is used twice, it will result in one payment instrument )\n",
        "tags": [
          "payment"
        ],
        "operationId": "PaymentInstrumentsByPaymentInstrumentId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific paymentinstrument."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentsGetNotFound"
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Endpoint to update the data associated with the specified paymentinstrument.\n\nAlso used to refresh the CVC of a creditcard payment instrument. In case of a recurring transaction the shopper can be forced to re-enter the verification code (cvc) - depends on the creditcard settings configuration.\n\nNormally handled by the javascript bridge.\n",
        "tags": [
          "payment"
        ],
        "operationId": "PaymentInstrumentsByPaymentInstrumentId1",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific paymentinstrument."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request object containing some or all of the updateable fields applicable for the type of the specified payment instrument. (CC or SEPA)",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentUpdateRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentsPatchBadRequest"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to delete payment instrument with a given ID.\n",
        "tags": [
          "payment"
        ],
        "operationId": "DeletePaymentInstrumentByPaymentInstrumentId",
        "parameters": [
          {
            "name": "paymentInstrumentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the specific paymentinstrument."
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response"
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentsGetNotFound"
            }
          }
        }
      }
    },
    "/payment-instruments": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "description": "Endpoint to receive a list of paymentinstruments.\n\nThe following parameters can be used as filter.\n\n- paymentInstrumentId\n\n- merchantPaymentInstrumentId\n\n- type\n\n- origin\n\n- recurring\n\n- createdAt\n\n- modifiedAt\n",
        "tags": [
          "payment"
        ],
        "operationId": "PaymentInstruments",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentList"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Endpoint to create a new paymentinstrument.\n\nExplicitly creating  payment instruments is possible for credit card and SEPA and should be done from the end customer's browser.\n\nCall would normally be handled by the javascript bridge.\n",
        "tags": [
          "payment"
        ],
        "operationId": "PaymentInstruments1",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request body to create a new paymentinstrument.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentResponse"
            }
          },
          "400": {
            "description": "Bad request based on invalid input.",
            "schema": {
              "$ref": "#/definitions/PaymentInstrumentsPostBadRequest"
            }
          }
        }
      }
    },
    "/installment/config": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The Configuration Request allows the merchant to read the stored configuration parameters for his merchant profile.\n",
        "tags": [
          "installments"
        ],
        "operationId": "InstallmentConfig",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/InstallmentConfigResponse"
            }
          }
        }
      }
    },
    "/installment/calculation/rate": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The Calculation Request calculates and returns an installment plan depending on the request parameters and the stored parameters of the merchant profile.\n",
        "tags": [
          "installments"
        ],
        "operationId": "InstallmentCalculationRate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Amount to be financed"
          },
          {
            "name": "calculationRate",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Contains the rate information"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/InstallmentCalculationRateResponse"
            }
          }
        }
      }
    },
    "/installment/calculation/time": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "The Calculation Request calculates and returns an installment plan depending on the request parameters and the stored parameters of the merchant profile.\n",
        "tags": [
          "installments"
        ],
        "operationId": "InstallmentCalculationTime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Amount to be financed"
          },
          {
            "name": "calculationTime",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "Contains the duration information of the installment plan"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/InstallmentCalculationTimeResponse"
            }
          }
        }
      }
    },
    "/settlements": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Endpoint to get all settlements. \n",
        "tags": [
          "settlements"
        ],
        "operationId": "SettlementsList",
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/SettlementsList"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/SettlementsNotFound"
            }
          }
        }
      }
    },
    "/settlements/{settlementId}": {
      "patch": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Endpoint to update settlement. \n",
        "tags": [
          "settlements"
        ],
        "operationId": "SettlementsUpdate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "settlementId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the settlement."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/SettlementResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/SettlementsNotFound"
            }
          }
        }
      }
    },
    "/settlements/download": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Download settlement. If there is only one id  the end point download csv file containing the file. If there are more than one id, the end point download zip containing csv files.\n",
        "tags": [
          "settlements"
        ],
        "operationId": "SettlementsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of settlement ids"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "schema": {
              "$ref": "#/definitions/SettlementResponse"
            }
          },
          "404": {
            "description": "Not found casued by invalid input.",
            "schema": {
              "$ref": "#/definitions/SettlementsNotFound"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HealthResponse": {
      "title": "HealthResponse",
      "type": "object",
      "properties": {
        "systemHealth": {
          "type": "string",
          "description": "The aggregated system health",
          "enum": [
            "GOOD",
            "BAD"
          ]
        }
      }
    },
    "GenderBaseTypeEnum": {
      "title": "GenderBaseTypeEnum",
      "type": "string",
      "description": "The gender of the persona.",
      "enum": [
        "MALE",
        "FEMALE"
      ]
    },
    "ChannelsBaseTypeEnum": {
      "title": "ChannelsBaseTypeEnum",
      "type": "string",
      "description": "The channel determine the kind of origin for this order. (optional, mandatory for creditcard, ratepay-invoice, ratepay-directdebit and ratepay-installment)",
      "enum": [
        "MOTO",
        "ECOM"
      ]
    },
    "ProductsBaseTypeEnum": {
      "title": "ProductsBaseTypeEnum",
      "type": "string",
      "description": "The product used to create this order. (mandatory)",
      "enum": [
        "creditcard",
        "paypal",
        "paydirekt",
        "ratepay-invoice",
        "ratepay-directdebit",
        "ratepay-installment",
        "sepa",
        "sofort"
      ]
    },
    "Item": {
      "title": "Item",
      "type": "object",
      "properties": {
        "name": {
          "description": "The articles name used in your shop.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "articleNumber": {
          "description": "The articles number used in your shop.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "totalPrice": {
          "description": "The total price for this item excluding taxes. The total amount should be given as smallest currency unit.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "totalPriceWithTax": {
          "description": "The total price for this item including taxes. The total amount should be given as smallest currency unit.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "unitPrice": {
          "description": "The unit price for this item excluding taxes. The unit amount should be given as smallest currency unit.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "unitPriceWithTax": {
          "description": "The unit price for this item including taxes. The unit amount should be given as smallest currency unit.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "tax": {
          "description": "The tax for this item. The tax should be given as smallest currency unit.",
          "type": "number",
          "format": "int",
          "minimum": 0,
          "maximum": 100
        },
        "quantity": {
          "description": "The quantity for this item.",
          "type": "number",
          "format": "int",
          "minimum": 1
        },
        "discount": {
          "description": "item specific discount",
          "type": "number",
          "format": "int",
          "minimum": -9999998,
          "maximum": -1
        }
      }
    },
    "Async": {
      "title": "Async",
      "type": "object",
      "description": "Async object for asynchronous payment methods like PayPal.",
      "properties": {
        "successUrl": {
          "description": "In case of a successful order the customer will be redirected to the given URL.",
          "type": "string",
          "format": "url",
          "minLength": 6,
          "maxLength": 2048
        },
        "failureUrl": {
          "description": "In case of a failed order the customer will be redirected to the given URL.",
          "type": "string",
          "format": "url",
          "minLength": 6,
          "maxLength": 2048
        },
        "cancelUrl": {
          "description": "In case of a cancellation by the customer, the customer will be redirected to the given URL.",
          "type": "string",
          "format": "url",
          "minLength": 6,
          "maxLength": 2048
        }
      },
      "required": [
        "successUrl",
        "failureUrl",
        "cancelUrl"
      ]
    },
    "OrderCreateRequest": {
      "title": "OrderCreateRequest",
      "type": "object",
      "properties": {
        "initialAmount": {
          "description": "Amount as smallest currency unit\ne.g 100€ will be result in amount = 10000\n",
          "type": "number",
          "format": "int"
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "async": {
          "$ref": "#/definitions/Async"
        },
        "transactionType": {
          "$ref": "#/definitions/InitialTransactionTypeBaseTypeEnum"
        },
        "terms": {
          "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "privacy": {
          "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "merchantOrderId": {
          "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "description": "The description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "statementDescription": {
          "description": "The statement description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "basket": {
          "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "customer": {
          "description": "The customer id which will be used to process this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "persona": {
          "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "billingAddress": {
          "description": "The address id used as billing address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "shippingAddress": {
          "description": "The address id used as shipping address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "ipAddress": {
          "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "channel": {
          "$ref": "#/definitions/ChannelsBaseTypeEnum"
        },
        "source": {
          "description": "The source is a form free descriptor of the origin.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "allowedProducts": {
          "description": "A List of all valid products for this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductsBaseTypeEnum"
          }
        }
      },
      "required": [
        "initialAmount",
        "currency",
        "async",
        "transactionType"
      ]
    },
    "InitialTransactionTypeBaseTypeEnum": {
      "title": "InitialTransactionTypeBaseTypeEnum",
      "type": "string",
      "description": "The type of the underlying Transaction",
      "enum": [
        "PREAUTH",
        "DEBIT"
      ]
    },
    "OrderUpdateRequest": {
      "title": "OrderUpdateRequest",
      "type": "object",
      "properties": {
        "terms": {
          "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "privacy": {
          "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "merchantOrderId": {
          "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "description": "The description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "statementDescription": {
          "description": "The statement description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "initialAmount": {
          "description": "Amount as smallest currency unit\ne.g 100€ will be result in amount = 10000\n",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "basket": {
          "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "customer": {
          "description": "The customer id which will be used to process this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "persona": {
          "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "billingAddress": {
          "description": "The address id used as billing address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "shippingAddress": {
          "description": "The address id used as shipping address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "ipAddress": {
          "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "channel": {
          "$ref": "#/definitions/ChannelsBaseTypeEnum"
        },
        "source": {
          "description": "The source is a form free descriptor of the origin.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "async": {
          "$ref": "#/definitions/Async"
        },
        "allowedProducts": {
          "description": "A List of all valid products for this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductsBaseTypeEnum"
          }
        },
        "transactionType": {
          "$ref": "#/definitions/InitialTransactionTypeBaseTypeEnum"
        }
      }
    },
    "OrderOpenRequest": {
      "title": "OrderOpenRequest",
      "type": "object",
      "properties": {
        "initialAmount": {
          "description": "Amount as smallest currency unit\ne.g 100€ will be result in amount = 10000\n",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217\n",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "product": {
          "$ref": "#/definitions/ProductsBaseTypeEnum"
        },
        "async": {
          "$ref": "#/definitions/Async"
        },
        "terms": {
          "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "privacy": {
          "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "merchantOrderId": {
          "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "description": "The description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "statementDescription": {
          "description": "The statement description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "basket": {
          "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "customer": {
          "description": "The customer id which will be used to process this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "persona": {
          "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "billingAddress": {
          "description": "The address id used as billing address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "shippingAddress": {
          "description": "The address id used as shipping address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "ipAddress": {
          "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "channel": {
          "$ref": "#/definitions/ChannelsBaseTypeEnum"
        },
        "source": {
          "description": "The source is a form free descriptor of the origin.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "payment": {
          "$ref": "#/definitions/OrderOpenPaymentRequest"
        },
        "deviceIdent": {
          "$ref": "#/definitions/DeviceIdentRequest"
        },
        "meta": {
          "$ref": "#/definitions/MetaRequest"
        }
      },
      "required": [
        "initialAmount",
        "currency",
        "product",
        "async"
      ]
    },
    "OrderCreditRequest": {
      "title": "OrderCreditRequest",
      "type": "object",
      "properties": {
        "initialAmount": {
          "description": "Amount as smallest currency unit\ne.g 100€ will be result in amount = 10000\n",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217\n",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "product": {
          "$ref": "#/definitions/ProductsBaseTypeEnum"
        },
        "terms": {
          "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "privacy": {
          "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "merchantOrderId": {
          "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "description": "The description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "statementDescription": {
          "description": "The statement description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "basket": {
          "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "customer": {
          "description": "The customer id which will be used to process this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "persona": {
          "description": "The persona id which will be used to process this order. note: the persona must be a persona from the given customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "billingAddress": {
          "description": "The address id used as billing address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "shippingAddress": {
          "description": "The address id used as shipping address for this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "ipAddress": {
          "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "channel": {
          "$ref": "#/definitions/ChannelsBaseTypeEnum"
        },
        "source": {
          "description": "The source is a form free descriptor of the origin.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "payment": {
          "$ref": "#/definitions/OrderOpenPaymentRequest"
        },
        "deviceIdent": {
          "$ref": "#/definitions/DeviceIdentRequest"
        }
      },
      "required": [
        "initialAmount",
        "currency",
        "product",
        "async"
      ]
    },
    "OrderOpenPaymentRequest": {
      "title": "OrderOpenPaymentRequest",
      "type": "object",
      "description": "Additional information Payment needed to proceed the order.",
      "properties": {
        "paymentInstrumentId": {
          "description": "An ID of an already created paymentinstrument. Used to proceed the order. (optional)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "cardNumber": {
          "description": "The Creditcard PAN used to proceed. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 12,
          "maxLength": 19
        },
        "verification": {
          "description": "The verification number of the creditcard. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        },
        "expiryMonth": {
          "description": "The expiry month of the creditcard. Format: 01 -> january, 02 -> February, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "expiryYear": {
          "description": "The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "cardHolder": {
          "description": "The full name of the cardholder.",
          "type": "string",
          "minLength": 3,
          "maxLength": 128
        },
        "bankName": {
          "description": "The name of the bank of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "iban": {
          "description": "IBAN of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "maxLength": 34
        },
        "bic": {
          "description": "BIC of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 8,
          "maxLength": 11
        },
        "accountHolder": {
          "description": "The account holders name of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 4,
          "maxLength": 128
        },
        "numberOfRates": {
          "description": "Number of rates for ratepay installment",
          "type": "integer"
        },
        "rate": {
          "description": "Rate for ratepay installment",
          "type": "integer"
        },
        "lastRate": {
          "description": "Last rate for ratepay installment",
          "type": "integer"
        },
        "interestRate": {
          "description": "Interest rate for ratepay installment",
          "type": "number"
        },
        "totalAmount": {
          "description": "Total amount for ratepay installment",
          "type": "integer"
        },
        "mandate": {
          "$ref": "#/definitions/MandateRequest"
        }
      }
    },
    "MandateRequest": {
      "title": "Mandate",
      "type": "object",
      "description": "SEPA mandate (only mandatory for SEPA orders)",
      "properties": {
        "mandateId": {
          "description": "The mandateId assigned to the SEPA mandate (optional)",
          "type": "string"
        },
        "createdDateTime": {
          "description": "Timestamp for mandate creation (mandatory)",
          "type": "number",
          "format": "date-time"
        },
        "mandateText": {
          "description": "Mandate text displayed to the customer (mandatory)",
          "type": "string"
        },
        "directDebitType": {
          "title": "DirectDebitType",
          "type": "string",
          "description": "The current mandate type of the direct debit type.\nThe mandate type can be one of the following.\nFIRST: It's the first execution of the mandate SINGLE: It's used only for one execution of the mandate RECURRING: It's used for recurring mandate usage FINAL: It's the last execution of the recurring mandate\n",
          "enum": [
            "FIRST",
            "SINGLE",
            "RECURRING",
            "FINAL"
          ]
        }
      }
    },
    "OrderResponse": {
      "title": "OrderResponse",
      "type": "object",
      "properties": {
        "orderId": {
          "description": "The order id from payengine.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "initialAmount": {
          "description": "The initial amount given to create this order.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "preauthorizedAmount": {
          "description": "The amount which has been authorized.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "capturedAmount": {
          "description": "The amount which has been captured.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "refundedAmount": {
          "description": "The amount which has been refunded.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "canceledAmount": {
          "description": "The amount which has been cancelled.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "transactions": {
          "description": "A list of all underlying transactions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionResponse"
          }
        },
        "status": {
          "$ref": "#/definitions/OrderStatesBaseTypeEnum"
        },
        "channel": {
          "$ref": "#/definitions/ChannelsBaseTypeEnum"
        },
        "createdAt": {
          "description": "This timestamp indicates the creation of this order.",
          "type": "number",
          "format": "date-time"
        },
        "modifiedAt": {
          "description": "This timestamp indicates the last modification of this order.",
          "type": "number",
          "format": "date-time"
        },
        "terms": {
          "description": "A timestamp in milliseconds of the approval of the customer to your terms and conditions. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "privacy": {
          "description": "A timestamp in milliseconds of the approval of the customer to your privacy policy. E.g. this is required for RatePAY orders.",
          "type": "number",
          "format": "integer"
        },
        "merchantOrderId": {
          "description": "The order id from your system/shop for Creditcards only 30 alphanumeric characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "paymentProviderTransactionId": {
          "description": "The order id from the payment provider.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "description": "The description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "statementDescription": {
          "description": "The statement description from your system/shop of this order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "basket": {
          "description": "The basket of your order. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "customer": {
          "$ref": "#/definitions/CustomerResponse"
        },
        "persona": {
          "$ref": "#/definitions/PersonaResponse"
        },
        "billingAddress": {
          "$ref": "#/definitions/AddressResponse"
        },
        "shippingAddress": {
          "$ref": "#/definitions/AddressResponse"
        },
        "ipAddress": {
          "description": "The IP address used to submit the order. (Optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "paymentInstrument": {
          "$ref": "#/definitions/PaymentInstrumentResponse"
        },
        "redirectUrl": {
          "description": "The URL which the customer needs to be redirected to.",
          "type": "string",
          "format": "url",
          "minLength": 6,
          "maxLength": 2048
        },
        "source": {
          "description": "The source of the order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "product": {
          "$ref": "#/definitions/ProductsBaseTypeEnum"
        },
        "allowedProducts": {
          "description": "A List of all valid products for this order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductsBaseTypeEnum"
          }
        },
        "settled": {
          "description": "A flag which indicates if this order has been settled or not.",
          "type": "boolean"
        },
        "settlementDate": {
          "description": "The date of the settlement.",
          "type": "string",
          "format": "date-time"
        },
        "transactionType": {
          "$ref": "#/definitions/InitialTransactionTypeBaseTypeEnum"
        },
        "deviceIdent": {
          "$ref": "#/definitions/DeviceIdentResponse"
        }
      },
      "required": [
        "orderId",
        "initialAmount",
        "preauthorizedAmount",
        "capturedAmount",
        "refundedAmount",
        "canceledAmount",
        "currency",
        "transactions",
        "status",
        "channel",
        "createdAt",
        "modifiedAt"
      ]
    },
    "CustomerResponse": {
      "title": "CustomerResponse",
      "type": "object",
      "properties": {
        "customerId": {
          "description": "The identifier of the customer. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "email": {
          "description": "The customers email address. unique.",
          "type": "string",
          "format": "email"
        },
        "merchantCustomerId": {
          "description": "The identifier of the customer. Created by you.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "addresses": {
          "description": "A list of all underlying addresses which are connected to the customer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressResponse"
          }
        },
        "personas": {
          "description": "A list of all underlying personas which are connected to the customer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonaResponse"
          }
        },
        "paymentInstruments": {
          "description": "A list of all underlying paymentinstruments which are connected to the customer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentResponse"
          }
        }
      },
      "required": [
        "customerId",
        "email"
      ]
    },
    "AddressResponse": {
      "title": "AddressResponse",
      "type": "object",
      "properties": {
        "addressId": {
          "description": "The identifier of the address. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "createdAt": {
          "description": "This timestamp indicates the creation of this address.",
          "type": "number",
          "format": "date-time"
        },
        "modifiedAt": {
          "description": "This timestamp indicates the last modification of this address.",
          "type": "number",
          "format": "date-time"
        },
        "firstName": {
          "description": "The firstname of this address. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "lastName": {
          "description": "The lastname of this address. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "street": {
          "description": "The street of this address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "houseNumber": {
          "description": "The housenumber of the street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "city": {
          "description": "The city of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "zip": {
          "description": "The zip of the address.",
          "type": "string",
          "minLength": 3,
          "maxLength": 10
        },
        "country": {
          "description": "The country of the address. Format [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "state": {
          "description": "The state of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "phone": {
          "description": "The phone of the address. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "fax": {
          "description": "The fax of the address. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "mobile": {
          "description": "The mobile of the address. limited to 16 characters!",
          "type": "string"
        },
        "title": {
          "description": "The title of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "additionalDetails": {
          "description": "Additional details for this address. This is a form free descriptor.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      },
      "required": [
        "addressId",
        "createdAt",
        "modifiedAt"
      ]
    },
    "PersonaResponse": {
      "title": "PersonaResponse",
      "type": "object",
      "properties": {
        "personaId": {
          "description": "The identifier of the persona. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "createdAt": {
          "description": "This timestamp indicates the creation of this persona.",
          "type": "number",
          "format": "date-time"
        },
        "modifiedAt": {
          "description": "This timestamp indicates the last modification of this persona.",
          "type": "number",
          "format": "date-time"
        },
        "firstName": {
          "description": "The firstname of this persona. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "lastName": {
          "description": "The lastname of this persona. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "phone": {
          "description": "The phone of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "mobile": {
          "description": "The mobile of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "fax": {
          "description": "The fax of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "birthday": {
          "description": "The birthday of the persona. Format as milliseconds.",
          "type": "number",
          "format": "date-time"
        },
        "gender": {
          "$ref": "#/definitions/GenderBaseTypeEnum"
        },
        "title": {
          "description": "The title of the persona.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      },
      "required": [
        "personaId",
        "createdAt",
        "modifiedAt"
      ]
    },
    "PaymentInstrumentResponse": {
      "title": "PaymentInstrumentResponse",
      "type": "object",
      "description": "The paymentinstrument which has been used to process this order. note: If no paymentinstrument has been submitted, one has been created with your submitted data.",
      "properties": {
        "paymentInstrumentId": {
          "description": "The identifier of the paymentinstrument. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "merchantPaymentInstrumentId": {
          "description": "The identifier of the paymentinstrument on your system. Created by you. limited to 100 characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "origin": {
          "$ref": "#/definitions/ProductsBaseTypeEnum"
        },
        "type": {
          "$ref": "#/definitions/PaymentInstrumentType"
        },
        "recurring": {
          "description": "This flag indicates if this paymentinstrument can be used for recurring payments.",
          "type": "boolean"
        },
        "createdAt": {
          "description": "Timestamp when it was created",
          "type": "integer"
        },
        "modifiedAt": {
          "description": "Timestamp when it was last updated",
          "type": "integer"
        },
        "attributes": {
          "description": "Additional attributes of this paymentinstrument. E.g. masked bank- or creditcarddata.",
          "type": "object"
        }
      },
      "required": [
        "paymentInstrumentId",
        "merchantPaymentInstrumentId",
        "origin",
        "type",
        "recurring",
        "attributes"
      ]
    },
    "InstallmentConfigResponse": {
      "title": "InstallmentConfigResponse",
      "type": "object",
      "description": "Installment Configurations",
      "properties": {
        "rateMinNormal": {
          "description": "Minimum rate of a normal installment plan",
          "type": "integer"
        },
        "monthNumberMin": {
          "description": "Minimum duration of installment plan",
          "type": "integer"
        },
        "monthNumberMax": {
          "description": "Maximum duration of installment plan",
          "type": "integer"
        }
      },
      "required": [
        "rateMinNormal",
        "monthNumberMin",
        "monthNumberMax"
      ]
    },
    "InstallmentCalculationRateResponse": {
      "title": "InstallmentCalculationRateResponse",
      "type": "object",
      "description": "Installment Calculation Rate Response",
      "properties": {
        "totalAmount": {
          "description": "Total of amount, interest-amount and service-charge",
          "type": "integer"
        },
        "amount": {
          "description": "Price that has to be financed",
          "type": "integer"
        },
        "interestAmount": {
          "description": "Total of all monthly paid interests",
          "type": "integer"
        },
        "serviceCharge": {
          "description": "Additional costs of financing",
          "type": "integer"
        },
        "interestRate": {
          "description": "Interest-rate which will be used to calculate the annual percentage rate",
          "type": "integer"
        },
        "annualPercentageRate": {
          "description": "Interest-rate based on service-charge and interest- rate",
          "type": "integer"
        },
        "monthlyDebitInterest": {
          "description": "Monthly interest rates based on annual-percentage- rate",
          "type": "integer"
        },
        "numberOfRates": {
          "description": "Number of months; duration of the installment plan",
          "type": "integer"
        },
        "rate": {
          "description": "Monthly rate to be paid by the customer",
          "type": "integer"
        },
        "lastRate": {
          "description": "Last monthly rate to be paid by the customer",
          "type": "integer"
        }
      },
      "required": [
        "totalAmount",
        "amount",
        "interestAmount",
        "serviceCharge",
        "interestRate",
        "annualPercentageRate",
        "monthlyDebitInterest",
        "numberOfRates",
        "rate",
        "lastRate"
      ]
    },
    "InstallmentCalculationTimeResponse": {
      "title": "InstallmentCalculationTimeResponse",
      "type": "object",
      "description": "Installment Calculation Time Response",
      "properties": {
        "totalAmount": {
          "description": "Total of amount, interest-amount and service-charge",
          "type": "integer"
        },
        "amount": {
          "description": "Price that has to be financed",
          "type": "integer"
        },
        "interestAmount": {
          "description": "Total of all monthly paid interests",
          "type": "integer"
        },
        "serviceCharge": {
          "description": "Additional costs of financing",
          "type": "integer"
        },
        "interestRate": {
          "description": "Interest-rate which will be used to calculate the annual percentage rate",
          "type": "integer"
        },
        "annualPercentageRate": {
          "description": "Interest-rate based on service-charge and interest- rate",
          "type": "integer"
        },
        "monthlyDebitInterest": {
          "description": "Monthly interest rates based on annual-percentage- rate",
          "type": "integer"
        },
        "numberOfRates": {
          "description": "Number of months; duration of the installment plan",
          "type": "integer"
        },
        "rate": {
          "description": "Monthly rate to be paid by the customer",
          "type": "integer"
        },
        "lastRate": {
          "description": "Last monthly rate to be paid by the customer",
          "type": "integer"
        }
      },
      "required": [
        "totalAmount",
        "amount",
        "interestAmount",
        "serviceCharge",
        "interestRate",
        "annualPercentageRate",
        "monthlyDebitInterest",
        "numberOfRates",
        "rate",
        "lastRate"
      ]
    },
    "TransactionResponse": {
      "title": "TransactionResponse",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TransactionType"
        },
        "transactionId": {
          "description": "The identifier of the transaction. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "status": {
          "$ref": "#/definitions/TransactionStatesBaseTypeEnum"
        },
        "initialAmount": {
          "description": "The initial amount given to create this transaction.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "description": {
          "description": "The description from your system/shop of this transaction.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "createdAt": {
          "description": "This timestamp indicates the creation of this transaction.",
          "type": "number",
          "format": "date-time"
        },
        "modifiedAt": {
          "description": "This timestamp indicates the last modification of this transaction.",
          "type": "number",
          "format": "date-time"
        },
        "order": {
          "description": "The identifier of the connected order.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "transactions": {
          "description": "A list of underlying transactions.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parentTransaction": {
          "description": "The identifier of the parent transaction.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "descriptor": {
          "description": "Identifier which holds the orderId",
          "type": "string",
          "minLength": 1,
          "maxLength": 10
        },
        "capturedAmount": {
          "description": "The amount which has been captured.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "refundedAmount": {
          "description": "The amount which has been refunded.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "canceledAmount": {
          "description": "The amount which has been cancelled.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        }
      },
      "required": [
        "transactionId",
        "status",
        "initialAmount",
        "currency",
        "description",
        "createdAt",
        "modifiedAt",
        "order",
        "transactions",
        "parentTransaction",
        "capturedAmount",
        "refundedAmount",
        "canceledAmount"
      ]
    },
    "TransactionStatesBaseTypeEnum": {
      "title": "TransactionStatesBaseTypeEnum",
      "type": "string",
      "description": "The current status of the transaction.\nThe status can be one of the following.\nCREATED, PENDING, IN_PROGRESS, OK, SUCCESS, FAILURE, DECLINED, ABORTED, EXPIRED\n",
      "enum": [
        "CREATED",
        "PENDING",
        "IN_PROGRESS",
        "OK",
        "SUCCESS",
        "FAILURE",
        "DECLINED",
        "ABORTED",
        "EXPIRED"
      ]
    },
    "OrderStatesBaseTypeEnum": {
      "title": "OrderStatesBaseTypeEnum",
      "type": "string",
      "description": "The current status of the order\nIt can be one of the following\nCREATED, OPEN, CLOSED\nA order remains open until the initial amount has been refunded or cancelled.\n",
      "enum": [
        "CREATED",
        "OPEN",
        "CLOSED"
      ]
    },
    "PreauthResponse": {
      "title": "PreauthResponse",
      "type": "object",
      "properties": {
        "capturedAmount": {
          "description": "The amount which has been captured.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        },
        "canceledAmount": {
          "description": "The amount which has been cancelled.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        }
      },
      "required": [
        "capturedAmount",
        "canceledAmount"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TransactionResponse"
        }
      ]
    },
    "DebitResponse": {
      "title": "DebitResponse",
      "type": "object",
      "properties": {
        "refundedAmount": {
          "description": "The amount which has been refunded.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        }
      },
      "required": [
        "refundedAmount"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TransactionResponse"
        }
      ]
    },
    "CaptureResponse": {
      "title": "CaptureResponse",
      "type": "object",
      "properties": {
        "refundedAmount": {
          "description": "The amount which has been refunded.",
          "type": "number",
          "format": "int",
          "minimum": 1,
          "maximum": 99999900
        }
      },
      "required": [
        "refundedAmount"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TransactionResponse"
        }
      ]
    },
    "TransactionRequest": {
      "title": "TransactionRequest",
      "type": "object",
      "properties": {
        "initialAmount": {
          "description": "Amount as smallest currency unit\ne.g 100€ will be result in amount = 10000\n",
          "type": "number",
          "format": "int"
        },
        "currency": {
          "description": "Currency code according to https://en.wikipedia.org/wiki/ISO_4217",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "description": {
          "description": "The description from your system/shop of this transaction.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "basket": {
          "description": "The basket of your transaction. (optional, mandatory for ratepay-invoice, ratepay-directdebit and ratepay-installment)",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        },
        "meta": {
          "$ref": "#/definitions/MetaRequest"
        }
      },
      "required": [
        "initialAmount",
        "currency"
      ]
    },
    "CustomerRequest": {
      "title": "CustomerRequest",
      "type": "object",
      "properties": {
        "email": {
          "description": "The customers email address. unique.",
          "type": "string",
          "format": "email",
          "minLength": 1,
          "maxLength": 254
        },
        "merchantCustomerId": {
          "description": "The identifier of the customer. Created by you.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      },
      "required": [
        "email"
      ]
    },
    "CustomerUpdateRequest": {
      "title": "CustomerUpdateRequest",
      "type": "object",
      "properties": {
        "merchantCustomerId": {
          "description": "The identifier of the customer. Created by you.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      }
    },
    "PersonaRequest": {
      "title": "PersonaRequest",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "The firstname of this persona. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "lastName": {
          "description": "The lastname of this persona. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "phone": {
          "description": "The phone of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "mobile": {
          "description": "The mobile of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "fax": {
          "description": "The fax of the persona. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "birthday": {
          "description": "The birthday of the persona. Format as milliseconds.",
          "type": "number",
          "format": "date-time"
        },
        "gender": {
          "$ref": "#/definitions/GenderBaseTypeEnum"
        },
        "title": {
          "description": "The title of the persona.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        }
      }
    },
    "AddressRequest": {
      "title": "AddressRequest",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "The firstname of this address. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "lastName": {
          "description": "The lastname of this address. limited to 35 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "street": {
          "description": "The street of this address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "houseNumber": {
          "description": "The housenumber of the street.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "city": {
          "description": "The city of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "zip": {
          "description": "The zip of the address.",
          "type": "string",
          "minLength": 3,
          "maxLength": 10
        },
        "country": {
          "description": "The country of the address. Format [https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2]",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "state": {
          "description": "The state of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "phone": {
          "description": "The phone of the address. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "fax": {
          "description": "The fax of the address. limited to 16 characters!",
          "type": "string",
          "minLength": 1,
          "maxLength": 16
        },
        "mobile": {
          "description": "The mobile of the address. limited to 16 characters!",
          "type": "string"
        },
        "title": {
          "description": "The title of the address.",
          "type": "string",
          "minLength": 1,
          "maxLength": 35
        },
        "additionalDetails": {
          "description": "Additional details for this address. This is a form free descriptor.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      }
    },
    "CustomerPaymentInstrumentRelation": {
      "title": "CustomerPaymentInstrumentRelation",
      "type": "object",
      "properties": {
        "paymentInstrumentId": {
          "description": "The identifier of a paymentinstrument which will be connected to the customer.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      },
      "required": [
        "paymentInstrumentId"
      ]
    },
    "PaymentInstrumentPayment": {
      "title": "PaymentInstrumentPayment",
      "type": "object",
      "properties": {
        "cardNumber": {
          "description": "The Creditcard PAN used to proceed. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 12,
          "maxLength": 19
        },
        "verification": {
          "description": "The verification number of the creditcard. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        },
        "expiryMonth": {
          "description": "The expiry month of the creditcard. Format: 01 -> january, 02 -> February, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "expiryYear": {
          "description": "The expiry year of the creditcard. Format: 01 -> 2001, 02 -> 2002, etc. (mandatory for creditcard, optional if a creditcard paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "cardHolder": {
          "description": "The full name of the cardholder.",
          "type": "string",
          "minLength": 3,
          "maxLength": 128
        },
        "bankName": {
          "description": "The name of the bank of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "iban": {
          "description": "IBAN of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "maxLength": 34
        },
        "bic": {
          "description": "BIC of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 8,
          "maxLength": 11
        },
        "accountHolder": {
          "description": "The account holders name of the SEPA account. (mandatory for sepa, optional if a sepa paymentInstrumentId was passed)",
          "type": "string",
          "minLength": 4,
          "maxLength": 128
        },
        "mandate": {
          "$ref": "#/definitions/MandateRequest"
        }
      }
    },
    "PaymentInstrumentRequest": {
      "title": "PaymentInstrumentRequest",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/ProductEnum"
        },
        "merchantPaymentInstrumentId": {
          "description": "The identifier of the paymentinstrument on your system. Created by you. limited to 100 characters.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "payment": {
          "$ref": "#/definitions/PaymentInstrumentPayment"
        }
      },
      "required": [
        "type"
      ]
    },
    "PaymentInstrumentUpdateRequest": {
      "title": "PaymentInstrumentUpdateRequest",
      "type": "object",
      "properties": {
        "verification": {
          "description": "The verification number of the creditcard. (CC only)",
          "type": "string",
          "minLength": 3,
          "maxLength": 4
        },
        "expiryMonth": {
          "description": "The expiry month of the creditcard. (CC only)",
          "type": "string"
        },
        "expiryYear": {
          "description": "The expiry year of the creditcard. (CC only)",
          "type": "string"
        },
        "cardHolder": {
          "description": "The name of the creditcard holder. (CC only)",
          "type": "string"
        },
        "bankName": {
          "description": "The name of the bank. (SEPA only)",
          "type": "string"
        },
        "bic": {
          "description": "The BIC of the bank. (SEPA only)",
          "type": "string"
        },
        "accountHolder": {
          "description": "The name of the bank account holder. (SEPA only)",
          "type": "string"
        },
        "mandate": {
          "$ref": "#/definitions/MandateRequest"
        }
      }
    },
    "DeviceIdentRequest": {
      "title": "DeviceIdentRequest",
      "type": "object",
      "properties": {
        "deviceIdentToken": {
          "type": "string",
          "maxLength": 128
        }
      }
    },
    "DeviceIdentResponse": {
      "title": "DeviceIdentResponse",
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "fraudscore": {
          "type": "number"
        },
        "fraudscoreRaw": {
          "type": "number"
        },
        "ruleScores": {
          "type": "string"
        },
        "fraudscoreRulematches": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "regioncode": {
          "type": "string"
        },
        "continent": {
          "type": "string"
        },
        "countryname": {
          "type": "string"
        },
        "regionname": {
          "type": "string"
        },
        "countrycode": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "exactidCreated": {
          "type": "string"
        },
        "smartidCreated": {
          "type": "string"
        },
        "exactid": {
          "type": "string"
        },
        "confidencelevel": {
          "type": "number"
        },
        "smartid": {
          "type": "string"
        },
        "confidencelevelhistory": {
          "type": "number"
        },
        "verifiedOs": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "languages": {
          "type": "string"
        }
      }
    },
    "MetaRequest": {
      "title": "MetaRequest",
      "type": "object",
      "description": "Contains specific information for different payment methods.",
      "properties": {
        "invoicing": {
          "type": "object",
          "description": "RatePAY specific parameter.",
          "$ref": "#/definitions/Invoicing"
        },
        "tracking": {
          "description": "RatePAY specific parameter, array of object of type Tracking",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tracking"
          }
        },
        "preferredLanguage": {
          "type": "string",
          "description": "RatePAY specific parameter, 2-letter language code, lower case.",
          "maxLength": 2
        },
        "referenceId": {
          "type": "string",
          "description": "RatePAY specific parameter.",
          "maxLength": 255
        }
      }
    },
    "Invoicing": {
      "title": "Invoicing",
      "type": "object",
      "properties": {
        "invoiceId": {
          "type": "string",
          "maxLength": 50
        },
        "invoiceDate": {
          "description": "Timestamp - earliest - 7 days before request, latest - day of request.",
          "type": "integer"
        },
        "deliveryDate": {
          "description": "Timestamp - earliest - 365 days before request, latest - 365 days after request.",
          "type": "integer"
        },
        "dueDate": {
          "description": "Timestamp - not before date of request AND not before invoice-date (if present).",
          "type": "integer"
        }
      }
    },
    "Tracking": {
      "title": "Tracking",
      "type": "object",
      "properties": {
        "trackingId": {
          "type": "string",
          "maxLength": 50
        },
        "provider": {
          "type": "string",
          "enum": [
            "DPD",
            "GLS",
            "DHL",
            "HLG",
            "HVS",
            "UPS",
            "TNT",
            "OTH"
          ]
        }
      }
    },
    "ProductEnum": {
      "title": "productEnum",
      "type": "string",
      "description": "The product which is represented by a paymentinstrument.",
      "enum": [
        "creditcard",
        "sepa"
      ]
    },
    "AddressList": {
      "title": "AddressList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AddressResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "PersonaList": {
      "title": "PersonaList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of personas.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonaResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "CustomerList": {
      "title": "CustomerList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of customers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "PaymentInstrumentList": {
      "title": "PaymentInstrumentList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of paymeninstruments.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "OrderList": {
      "title": "OrderList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of orders.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "TransactionList": {
      "title": "TransactionList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of transactions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "PaymentInstrumentType": {
      "title": "PaymentInstrumentType",
      "type": "string",
      "description": "the type of the payment instrument",
      "enum": [
        "sepa",
        "creditcard",
        "paypal",
        "paydirekt",
        "bank-transfer",
        "sofort"
      ]
    },
    "TransactionType": {
      "title": "TransactionType",
      "type": "string",
      "description": "the type of the transaction",
      "enum": [
        "PREAUTH",
        "DEBIT",
        "CANCEL",
        "CAPTURE",
        "REFUND"
      ]
    },
    "ApiErrorResponse": {
      "type": "object",
      "description": "define the error message object",
      "properties": {
        "status": {
          "type": "number",
          "format": "int",
          "example": "400 | 401 | 404 | 412 | 500"
        },
        "message": {
          "type": "string",
          "example": "Error while listing customers."
        },
        "code": {
          "type": "number",
          "format": "int"
        },
        "elements": {
          "type": "array",
          "description": "defines the error message object",
          "items": {
            "$ref": "#/definitions/ApiErrorMessage"
          }
        }
      }
    },
    "ApiErrorMessage": {
      "type": "object",
      "description": "defines the error message child object",
      "properties": {
        "code": {
          "type": "number",
          "format": "int",
          "minimum": 0,
          "maximum": 31999
        }
      }
    },
    "OrdersCreditPostBadRequest": {
      "title": "BadRequest",
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersCreditPostErrors"
          }
        }
      }
    },
    "OrdersDebitPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersDebitPostErrors"
          }
        }
      }
    },
    "OrdersPreauthPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersPreauthPostErrors"
          }
        }
      }
    },
    "OrdersTransactionsRefundPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsRefundPostErrors"
          }
        }
      }
    },
    "OrdersTransactionsCapturePostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsCapturePostErrors"
          }
        }
      }
    },
    "OrdersTransactionsCancelPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating order!"
        },
        "code": {
          "type": "number",
          "example": 12000
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsCancelPostErrors"
          }
        }
      }
    },
    "OrdersTransactionsGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while loading transaction!"
        },
        "code": {
          "type": "number",
          "example": 14001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsGetErrors"
          }
        }
      }
    },
    "OrdersTransactionsPatchBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while updating transaction!"
        },
        "code": {
          "type": "number",
          "example": 14002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsPatchErrors"
          }
        }
      }
    },
    "OrdersTransactionsGetAllNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while loading transaction!"
        },
        "code": {
          "type": "number",
          "example": 14001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersTransactionsGetAllErrors"
          }
        }
      }
    },
    "OrdersGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while loading order!"
        },
        "code": {
          "type": "number",
          "example": 12001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrdersGetErrors"
          }
        }
      }
    },
    "CustomersPersonasGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while fetching persona!"
        },
        "code": {
          "type": "number",
          "example": 8002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPersonasGetErrors"
          }
        }
      }
    },
    "CustomersPersonasGetAllBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while fetching persona!"
        },
        "code": {
          "type": "number",
          "example": 8002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPersonasGetAllErrors"
          }
        }
      }
    },
    "CustomersPersonasPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating persona!"
        },
        "code": {
          "type": "number",
          "example": 8001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPersonasPostErrors"
          }
        }
      }
    },
    "CustomersAddressesGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while loading address!"
        },
        "code": {
          "type": "number",
          "example": 6002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersAddressesGetErrors"
          }
        }
      }
    },
    "CustomersAddressesGetAllBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while loading address!"
        },
        "code": {
          "type": "number",
          "example": 6002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersAddressesGetAllErrors"
          }
        }
      }
    },
    "CustomersAddressesPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating persona!"
        },
        "code": {
          "type": "number",
          "example": 6001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersAddressesPostErrors"
          }
        }
      }
    },
    "CustomersPaymentInstrumentsDeleteBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while removing payment instrument association!"
        },
        "code": {
          "type": "number",
          "example": 4011
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPaymentInstrumentsDeleteErrors"
          }
        }
      }
    },
    "CustomersPaymentInstrumentsGetBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while fetching payment instrument!"
        },
        "code": {
          "type": "number",
          "example": 10001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPaymentInstrumentsGetErrors"
          }
        }
      }
    },
    "CustomersPaymentInstrumentsPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while adding payment instrument association!"
        },
        "code": {
          "type": "number",
          "example": 4099
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPaymentInstrumentsPostErrors"
          }
        }
      }
    },
    "CustomersGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while fetching customer!"
        },
        "code": {
          "type": "number",
          "example": 4002
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersGetErrors"
          }
        }
      }
    },
    "CustomersPatchBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while updating customer!"
        },
        "code": {
          "type": "number",
          "example": 4003
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPatchErrors"
          }
        }
      }
    },
    "CustomersPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating customer!"
        },
        "code": {
          "type": "number",
          "example": 4001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomersPostErrors"
          }
        }
      }
    },
    "PaymentInstrumentsGetNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "message": {
          "type": "string",
          "example": "Error while fetching payment instrument!"
        },
        "code": {
          "type": "number",
          "example": 10001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentsGetErrors"
          }
        }
      }
    },
    "PaymentInstrumentsPatchBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while updating payment instrument!"
        },
        "code": {
          "type": "number",
          "example": 10003
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentsPatchErrors"
          }
        }
      }
    },
    "PaymentInstrumentsPostBadRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 400
        },
        "message": {
          "type": "string",
          "example": "Error while creating payment instrument!"
        },
        "code": {
          "type": "number",
          "example": 10003
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentInstrumentsPostErrors"
          }
        }
      }
    },
    "SettlementResponse": {
      "title": "SettlementResponse",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier of the settlements. Created by payengine",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "settlementsFile": {
          "description": "Settlements file.",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "product": {
          "description": "Product",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "receivedAt": {
          "description": "This timestamp indicates the arrival of this settlement.",
          "type": "number",
          "format": "date-time"
        },
        "fileName": {
          "description": "Name of the file",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "downloaded": {
          "description": "Product",
          "type": "boolean"
        },
        "merchantId": {
          "description": "Merchant Id",
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        }
      }
    },
    "SettlementsList": {
      "title": "SettlementsList",
      "type": "object",
      "properties": {
        "elements": {
          "description": "A list of settlements.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettlementResponse"
          }
        },
        "totalPages": {
          "description": "A counter for the total pages returned.",
          "type": "number",
          "format": "int",
          "minimum": 1
        }
      },
      "required": [
        "elements",
        "totalPages"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "number"
        },
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "SettlementsNotFound": {
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 404
        },
        "code": {
          "type": "number",
          "example": 50001
        },
        "globalTrackId": {
          "type": "string",
          "example": "Some Request ID"
        },
        "elements": {
          "title": "Errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SettlementsPatchErrors"
          }
        }
      }
    },
    "OrdersCreditPostErrors": {
      "title": "Error",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12213,
          "field": "terms",
          "message": "Field terms is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12214,
          "field": "terms",
          "message": "Bad value for terms. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12215,
          "field": "privacy",
          "message": "Field privacy is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12216,
          "field": "privacy",
          "message": "Bad value for privacy. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12218,
          "field": "statementDescription",
          "message": "Bad value for statementDescription. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12237,
          "field": "customer",
          "message": "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12238,
          "field": "customer",
          "message": "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12239,
          "field": "customer",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12240,
          "field": "persona",
          "message": "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12241,
          "field": "persona",
          "message": "Bad value for persona. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12242,
          "field": "persona",
          "message": "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
        },
        {
          "code": 12243,
          "field": "persona",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
        },
        {
          "code": 12244,
          "field": "billingAddress",
          "message": "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12245,
          "field": "billingAddress",
          "message": "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12246,
          "field": "shippingAddress",
          "message": "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12247,
          "field": "shippingAddress",
          "message": "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12248,
          "field": "ipAddress",
          "message": "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12249,
          "field": "ipAddress",
          "message": "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12250,
          "field": "channel",
          "message": "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12251,
          "field": "channel",
          "message": "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12252,
          "field": "source",
          "message": "Bad value for source.  Expected: string of length between 1 and 128 characters."
        },
        {
          "code": 10201,
          "field": "type",
          "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
        },
        {
          "code": 10202,
          "field": "type",
          "message": "Bad value for type. string value in ['sepa', 'creditcard']."
        },
        {
          "code": 12255,
          "field": "payment",
          "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 12998,
          "field": "payment.riskIdentId",
          "message": "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
        },
        {
          "code": 129999,
          "field": "payment.{unexpected_field}",
          "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 16000,
          "field": "payment.cardNumber",
          "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16001,
          "field": "payment.cardNumber",
          "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16002,
          "field": "payment.verification",
          "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16003,
          "field": "payment.verification",
          "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16004,
          "field": "payment.expiryMonth",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16005,
          "field": "payment.expiryMonth",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16006,
          "field": "payment.expiryYear",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16007,
          "field": "payment.expiryYear",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16008,
          "field": "payment.expiryMonth & payment.expiryYear",
          "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
        },
        {
          "code": 16009,
          "field": "payment.cardHolder",
          "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16010,
          "field": "payment.cardHolder",
          "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16016,
          "field": "payment.accountHolder",
          "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
        }
      ]
    },
    "OrdersDebitPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12204,
          "field": "async",
          "message": "Field async is missing. Expected: object of type Async."
        },
        {
          "code": 12205,
          "field": "async.successUrl",
          "message": "Field async.successUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12206,
          "field": "async.successUrl",
          "message": "Bad value for async.successUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12207,
          "field": "async.failureUrl",
          "message": "Field async.failureUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12208,
          "field": "async.failureUrl",
          "message": "Bad value for async.failureUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12209,
          "field": "async.cancelUrl",
          "message": "Field async.cancelUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12210,
          "field": "async.cancelUrl",
          "message": "Bad value for async.cancelUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12211,
          "field": "async.transactionType",
          "message": "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
        },
        {
          "code": 12212,
          "field": "async.transactionType",
          "message": "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
        },
        {
          "code": 12213,
          "field": "terms",
          "message": "Field terms is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12214,
          "field": "terms",
          "message": "Bad value for terms. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12215,
          "field": "privacy",
          "message": "Field privacy is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12216,
          "field": "privacy",
          "message": "Bad value for privacy. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12218,
          "field": "statementDescription",
          "message": "Bad value for statementDescription. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12237,
          "field": "customer",
          "message": "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12238,
          "field": "customer",
          "message": "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12239,
          "field": "customer",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12240,
          "field": "persona",
          "message": "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12241,
          "field": "persona",
          "message": "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12242,
          "field": "persona",
          "message": "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
        },
        {
          "code": 12243,
          "field": "persona",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
        },
        {
          "code": 12244,
          "field": "billingAddress",
          "message": "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12245,
          "field": "billingAddress",
          "message": "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12246,
          "field": "shippingAddress",
          "message": "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12247,
          "field": "shippingAddress",
          "message": "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12248,
          "field": "ipAddress",
          "message": "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12249,
          "field": "ipAddress",
          "message": "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12250,
          "field": "channel",
          "message": "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12251,
          "field": "channel",
          "message": "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12252,
          "field": "source",
          "message": "Bad value for source.  Expected: string of length between 1 and 128 characters."
        },
        {
          "code": 10201,
          "field": "type",
          "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
        },
        {
          "code": 10202,
          "field": "type",
          "message": "Bad value for type. string value in ['sepa', 'creditcard']."
        },
        {
          "code": 12255,
          "field": "payment",
          "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 12998,
          "field": "payment.riskIdentId",
          "message": "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
        },
        {
          "code": 129999,
          "field": "payment.{unexpected_field}",
          "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 16000,
          "field": "payment.cardNumber",
          "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16001,
          "field": "payment.cardNumber",
          "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16002,
          "field": "payment.verification",
          "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16003,
          "field": "payment.verification",
          "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16004,
          "field": "payment.expiryMonth",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12 representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16005,
          "field": "payment.expiryMonth",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16006,
          "field": "payment.expiryYear",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16007,
          "field": "payment.expiryYear",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16008,
          "field": "payment.expiryMonth & payment.expiryYear",
          "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
        },
        {
          "code": 16009,
          "field": "payment.cardHolder",
          "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16010,
          "field": "payment.cardHolder",
          "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16011,
          "field": "payment.bankName",
          "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
        },
        {
          "code": 16012,
          "field": "payment.iban",
          "message": "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16013,
          "field": "payment.iban",
          "message": "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16014,
          "field": "payment.bic",
          "message": "Field payment.bic is missing. Expected: sstring of length 8 or 11 representing a valid BIC representing a valid german BIC."
        },
        {
          "code": 16015,
          "field": "payment.bic",
          "message": "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
        },
        {
          "code": 16016,
          "field": "payment.accountHolder",
          "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
        }
      ]
    },
    "OrdersPreauthPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12204,
          "field": "async",
          "message": "Field async is missing. Expected: object of type Async."
        },
        {
          "code": 12205,
          "field": "async.successUrl",
          "message": "Field async.successUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12206,
          "field": "async.successUrl",
          "message": "Bad value for async.successUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12207,
          "field": "async.failureUrl",
          "message": "Field async.failureUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12208,
          "field": "async.failureUrl",
          "message": "Bad value for async.failureUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12209,
          "field": "async.cancelUrl",
          "message": "Field async.cancelUrl is missing. Expected: string representing a valid URL."
        },
        {
          "code": 12210,
          "field": "async.cancelUrl",
          "message": "Bad value for async.cancelUrl. Expected: string representing a valid URL."
        },
        {
          "code": 12211,
          "field": "async.transactionType",
          "message": "Field async.transactionType is missing. Expected: string value in ['PREAUTH', 'DEBIT']."
        },
        {
          "code": 12212,
          "field": "async.transactionType",
          "message": "Bad value for async.transactionType. Expected: string value in ['PREAUTH', 'DEBIT']."
        },
        {
          "code": 12213,
          "field": "terms",
          "message": "Field terms is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12214,
          "field": "terms",
          "message": "Bad value for terms. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12215,
          "field": "privacy",
          "message": "Field privacy is missing. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12216,
          "field": "privacy",
          "message": "Bad value for privacy. Expected: UNIX timestamp in ms."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12218,
          "field": "statementDescription",
          "message": "Bad value for statementDescription. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12237,
          "field": "customer",
          "message": "Field customer is missing. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12238,
          "field": "customer",
          "message": "Bad value for customer. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12239,
          "field": "customer",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Customer object."
        },
        {
          "code": 12240,
          "field": "persona",
          "message": "Field persona is missing. Expected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12241,
          "field": "persona",
          "message": "Bad value for persona. xpected: A valid string identifier between 1 and 255 characters representing a Persona object."
        },
        {
          "code": 12242,
          "field": "persona",
          "message": "Referenced object for persona invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.birthday filled out."
        },
        {
          "code": 12243,
          "field": "persona",
          "message": "Referenced object for customer invalid. Expected: A valid string identifier between 1 and 255 characters representing a Persona object having persona.phone, persona.mobile filled out."
        },
        {
          "code": 12244,
          "field": "billingAddress",
          "message": "Field billingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12245,
          "field": "billingAddress",
          "message": "Bad value for billingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12246,
          "field": "shippingAddress",
          "message": "Field shippingAddress is missing. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12247,
          "field": "shippingAddress",
          "message": "Bad value for shippingAddress. Expected: A valid string identifier between 1 and 255 characters representing an Address object."
        },
        {
          "code": 12248,
          "field": "ipAddress",
          "message": "Field ipAddress is missing. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12249,
          "field": "ipAddress",
          "message": "Bad value for ipAddress. Expected: A string between 1 and 255 characters representing an valid IPv4 - IPv6 address."
        },
        {
          "code": 12250,
          "field": "channel",
          "message": "Field channel is missing. Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12251,
          "field": "channel",
          "message": "Bad value for channel.  Expected: A string value in ['MOTO', 'ECOM']."
        },
        {
          "code": 12252,
          "field": "source",
          "message": "Bad value for source.  Expected: string of length between 1 and 128 characters."
        },
        {
          "code": 10201,
          "field": "type",
          "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
        },
        {
          "code": 10202,
          "field": "type",
          "message": "Bad value for type. string value in ['sepa', 'creditcard']."
        },
        {
          "code": 12255,
          "field": "payment",
          "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 12998,
          "field": "payment.riskIdentId",
          "message": "Bad value for payment.riskIdentId. Expected: A string object of length between 1 and 255."
        },
        {
          "code": 129999,
          "field": "payment.{unexpected_field}",
          "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 16000,
          "field": "payment.cardNumber",
          "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16001,
          "field": "payment.cardNumber",
          "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16002,
          "field": "payment.verification",
          "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16003,
          "field": "payment.verification",
          "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16004,
          "field": "payment.expiryMonth",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16005,
          "field": "payment.expiryMonth",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16006,
          "field": "payment.expiryYear",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16007,
          "field": "payment.expiryYear",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16008,
          "field": "payment.expiryMonth & payment.expiryYear",
          "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
        },
        {
          "code": 16009,
          "field": "payment.cardHolder",
          "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16010,
          "field": "payment.cardHolder",
          "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16011,
          "field": "payment.bankName",
          "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
        },
        {
          "code": 16012,
          "field": "payment.iban",
          "message": "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16013,
          "field": "payment.iban",
          "message": "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16014,
          "field": "payment.bic",
          "message": "Field payment.bic is missing. Expected: string of length 8 or 11 representing a valid BIC representing a valid german BIC."
        },
        {
          "code": 16015,
          "field": "payment.bic",
          "message": "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
        },
        {
          "code": 16016,
          "field": "payment.accountHolder",
          "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
        }
      ]
    },
    "OrdersTransactionsRefundPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        }
      ]
    },
    "OrdersTransactionsCapturePostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        }
      ]
    },
    "OrdersTransactionsCancelPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        }
      ]
    },
    "OrdersTransactionsGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12101,
          "field": "orderId",
          "message": "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
        },
        {
          "code": 14101,
          "field": "transactionId",
          "message": "A Transaction with specified id can not be found. Expected: A valid string identifier representing a Transaction object between 1 and 255 characters."
        }
      ]
    },
    "OrdersTransactionsPatchErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12101,
          "field": "orderId",
          "message": "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
        },
        {
          "code": 14101,
          "field": "transactionId",
          "message": "A Transaction with specified id can not be found. Expected: A valid string identifier representing a Transaction object between 1 and 255 characters."
        },
        {
          "code": 12200,
          "field": "initialAmount",
          "message": "Field initialAmount is missing.  Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12201,
          "field": "initialAmount",
          "message": "Bad value for initialAmount. Expected: Positive integer between 1 and 9999999."
        },
        {
          "code": 12202,
          "field": "currency",
          "message": "Field currency is missing. Expected: string value in ['EUR']."
        },
        {
          "code": 12203,
          "field": "currency",
          "message": "Bad value for currency. Expected: string value in ['EUR']."
        },
        {
          "code": 12217,
          "field": "description",
          "message": "Bad value for description. Expected: string of length between 1 and 128."
        },
        {
          "code": 12219,
          "field": "basket",
          "message": "Field basket is missing. Expected: array of type Item."
        },
        {
          "code": 12220,
          "field": "basket",
          "message": "Bad value for basket. Expected: array of type Item."
        },
        {
          "code": 12221,
          "field": "basket.item.name",
          "message": "Field basket.item.name is missing. Expected: string of length between 1 and 128."
        },
        {
          "code": 12222,
          "field": "basket.item.name",
          "message": "Bad value for basket.item.name. Expected: string of length between 1 and 128."
        },
        {
          "code": 12223,
          "field": "basket.item.articleNumber",
          "message": "Field basket.item.articleNumber is missing. Expected: string of length between 1 and 255."
        },
        {
          "code": 12224,
          "field": "basket.item.articleNumber",
          "message": "Bad value for basket.item.articleNumber. Expected: string of length between 1 and 255."
        },
        {
          "code": 12225,
          "field": "basket.item.totalPrice",
          "message": "Field basket.item.totalPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12226,
          "field": "basket.item.totalPrice",
          "message": "Bad value for basket.item.totalPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12227,
          "field": "basket.item.totalPriceWithTax",
          "message": "Field basket.item.totalPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12228,
          "field": "basket.item.totalPriceWithTax",
          "message": "Bad value for basket.item.totalPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12229,
          "field": "basket.item.tax",
          "message": "Field basket.item.tax is missing. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12230,
          "field": "basket.item.tax",
          "message": "Bad value for basket.item.tax. Expected: positive integer between 1 and 100."
        },
        {
          "code": 12231,
          "field": "basket.item.unitPrice",
          "message": "Field basket.item.unitPrice is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12232,
          "field": "basket.item.unitPrice",
          "message": "Bad value for basket.item.unitPrice. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12233,
          "field": "basket.item.unitPriceWithTax",
          "message": "Field basket.item.unitPriceWithTax is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12234,
          "field": "basket.item.unitPriceWithTax",
          "message": "Bad value for basket.item.unitPriceWithTax. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12235,
          "field": "basket.item.quantity",
          "message": "Field basket.item.quantity is missing. Expected: positive integer between 1 and 9999999."
        },
        {
          "code": 12236,
          "field": "basket.item.quantity",
          "message": "Bad value for basket.item.quantity. Expected: positive integer between 1 and 9999999."
        }
      ]
    },
    "OrdersTransactionsGetAllErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12101,
          "field": "orderId",
          "message": "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
        }
      ]
    },
    "OrdersGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 12101,
          "field": "orderId",
          "message": "An Order with specified id can not be found. Expected: A valid string identifier representing an Order object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPersonasGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        },
        {
          "code": 8101,
          "field": "personaId",
          "message": "A Persona with specified id can not be found. Expected: A valid string identifier representing a Persona object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPersonasGetAllErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPersonasPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 8201,
          "field": "firstName",
          "message": "Field firstName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 8202,
          "field": "firstName",
          "message": "Bad value for firstName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 8203,
          "field": "lastName",
          "message": "Field lastName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 8204,
          "field": "lastName",
          "message": "Bad value for lastName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 8205,
          "field": "phone",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 8206,
          "field": "fax",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 8207,
          "field": "mobile",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 8208,
          "field": "birthday",
          "message": "Bad value for 'birthday'. Expected: UNIX timestamp in ms."
        },
        {
          "code": 8209,
          "field": "gender",
          "message": "Bad range for gender. Expected: string in ['MALE', 'FEMALE']."
        },
        {
          "code": 8210,
          "field": "title",
          "message": "Bad value for title. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        }
      ]
    },
    "CustomersAddressesGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        },
        {
          "code": 6101,
          "field": "addressId",
          "message": "An Address with specified id can not be found. Expected: A valid string identifier representing an Address object between 1 and 255 characters."
        }
      ]
    },
    "CustomersAddressesGetAllErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        }
      ]
    },
    "CustomersAddressesPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 6201,
          "field": "firstName",
          "message": "Field firstName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6202,
          "field": "firstName",
          "message": "Bad value for firstName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6203,
          "field": "lastName",
          "message": "Field lastName is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6204,
          "field": "lastName",
          "message": "Bad value for lastName. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6205,
          "field": "street",
          "message": "Field street is missing. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6206,
          "field": "street",
          "message": "Bad value for street. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6207,
          "field": "houseNumber",
          "message": "Field houseNumber is missing. Expected: string between 1 and 35 symbols, containing letters and digits."
        },
        {
          "code": 6208,
          "field": "houseNumber",
          "message": "Bad value for houseNumber. Expected: string between 1 and 35 symbols, containing letters and digits."
        },
        {
          "code": 6209,
          "field": "city",
          "message": "Field city is missing. Expected: string between 1 and 35 symbols, containing letters, digits, whitespaces and dashes."
        },
        {
          "code": 6210,
          "field": "city",
          "message": "Bad value for city. Expected: string between 1 and 35 symbols, containing letters, digits, whitespaces and dashes."
        },
        {
          "code": 6211,
          "field": "zip",
          "message": "Field zip is missing. Expected: string between 3 and 10 symbols, containing letters, digits, whitespaces and dashes."
        },
        {
          "code": 6212,
          "field": "zip",
          "message": "Bad value for zip. Expected: string between 3 and 10 symbols, containing letters, digits, whitespaces and dashes."
        },
        {
          "code": 6213,
          "field": "country",
          "message": "Field country is missing. Expected: string with size 2 symbols, according to ISO 3166-1 Alpha-2 code."
        },
        {
          "code": 6214,
          "field": "country",
          "message": "Bad value for country. Expected: string with size 2 symbols, according to ISO 3166-1 Alpha-2 code."
        },
        {
          "code": 6215,
          "field": "state",
          "message": "Bad value for state. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6216,
          "field": "phone",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 6217,
          "field": "fax",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 6218,
          "field": "mobile",
          "message": "Bad value for phone. Expected: string between 1 and 16 symbols, containing numbers and chars in [+/]."
        },
        {
          "code": 6219,
          "field": "title",
          "message": "Bad value for title. Expected: string between 1 and 35 symbols, containing letters, whitespaces and chars in ['.-]."
        },
        {
          "code": 6220,
          "field": "additionalDetails",
          "message": "Bad value for additionalDetails. Expected: string between 1 and 255 symbols, containing letters, whitespaces and chars in ['.-]."
        }
      ]
    },
    "CustomersPaymentInstrumentsDeleteErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        },
        {
          "code": 10101,
          "field": "paymentInstrumentId",
          "message": "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPaymentInstrumentsGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPaymentInstrumentsPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        },
        {
          "code": 10101,
          "field": "paymentInstrumentId",
          "message": "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
        }
      ]
    },
    "CustomersGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        }
      ]
    },
    "CustomersPatchErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4101,
          "field": "customerId",
          "message": "A Customer with specified id can not be found. Expected: A valid string identifier representing a Customer object between 1 and 255 characters."
        },
        {
          "code": 4202,
          "field": "merchantCustomerId",
          "message": "Bad value for merchantCustomerId. Expected: A valid unique string identifier between 1 and 255 characters."
        },
        {
          "code": 4203,
          "field": "merchantCustomerId",
          "message": "Value for merchantCustomerId already exists. Expected: A valid unique string identifier between 1 and 255 characters."
        }
      ]
    },
    "CustomersPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 4201,
          "field": "email",
          "message": "Bad value for email. Expected: valid e-mail address between 1 and 254 characters."
        },
        {
          "code": 4298,
          "field": "email",
          "message": "Field email already exists. Expected: unique valid e-mail address between 1 and 254 characters."
        },
        {
          "code": 4202,
          "field": "merchantCustomerId",
          "message": "Bad value for merchantCustomerId. Expected: unique string between 1 and 255 characters."
        },
        {
          "code": 4203,
          "field": "merchantCustomerId",
          "message": "Field merchantCustomerId already exists. Expected: unique string between 1 and 255 characters."
        }
      ]
    },
    "PaymentInstrumentsGetErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 10101,
          "field": "paymentInstrumentId",
          "message": "A Payment Instrument with specified id can not be found. Expected: A valid string identifier representing a Payment Instrument object between 1 and 255 characters."
        }
      ]
    },
    "PaymentInstrumentsPatchErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 10204,
          "field": "verification",
          "message": "Field verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 10205,
          "field": "verification",
          "message": "Bad value for verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        }
      ]
    },
    "PaymentInstrumentsPostErrors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 10201,
          "field": "type",
          "message": "Field type is missing. Expected: string value in ['sepa', 'creditcard']."
        },
        {
          "code": 10202,
          "field": "type",
          "message": "Bad value for type. string value in ['sepa', 'creditcard']."
        },
        {
          "code": 10203,
          "field": "payment",
          "message": "Field payment is missing. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 10204,
          "field": "payment.{unexpected_field}",
          "message": "Bad value for payment.{unexpected_field} is unknown. Expected: A valid object of type PaymentInstrumentPayment."
        },
        {
          "code": 16000,
          "field": "payment.cardNumber",
          "message": "Field payment.cardNumber is missing. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16001,
          "field": "payment.cardNumber",
          "message": "Bad value for payment.cardNumber. Expected: string of length between 12 and 19 representing a valid creditcard number."
        },
        {
          "code": 16002,
          "field": "payment.verification",
          "message": "Field payment.verification is missing. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16003,
          "field": "payment.verification",
          "message": "Bad value for payment.verification. Expected: string of length between 3 and 4 representing a valid creditcard verification number."
        },
        {
          "code": 16004,
          "field": "payment.expiryMonth",
          "message": 16005
        },
        {
          "code": "payment.expiryMonth",
          "field": "Field payment.expiryMonth is missing. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date.",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '01' and '12' representing the month in a valid creditcard expiry date."
        },
        {
          "code": 16006,
          "field": "payment.expiryYear",
          "message": "Field payment.expiryMonth is missing. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16007,
          "field": "payment.expiryYear",
          "message": "Bad value for payment.expiryMonth. Expected: string of length 2 between '00' and '99' representing the year in a valid creditcard expiry date."
        },
        {
          "code": 16008,
          "field": "payment.expiryMonth & payment.expiryYear",
          "message": "Bad value for combination of payment.expiryMonth and payment.exiryYear. Expected: payment.expiryMonth and payment.expiryYear combined should represent a valid credit card expiry date."
        },
        {
          "code": 16009,
          "field": "payment.cardHolder",
          "message": "Field payment.cardHolder is missing. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16010,
          "field": "payment.cardHolder",
          "message": "Bad value for payment.cardHolder. Expected: string of length between 3 and 128 containing only alpha, whitespaces, dots, aphostrophes, dashes."
        },
        {
          "code": 16011,
          "field": "payment.bankName",
          "message": "Bad value for payment.bankName. Expected: string of length between 1 and 255 containing only alpha, whitespaces, numeric characters."
        },
        {
          "code": 16012,
          "field": "payment.iban",
          "message": "Field payment.iban is missing. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16013,
          "field": "payment.iban",
          "message": "Bad value for payment.iban. Expected: string of lentgth 22 representing a valid german IBAN."
        },
        {
          "code": 16014,
          "field": "payment.bic",
          "message": "Field payment.bic is missing. Expected: sstring of length 8 or 11 representing a valid BIC representing a valid german BIC."
        },
        {
          "code": 16015,
          "field": "payment.bic",
          "message": "Bad value for payment.bic. Expected: sstring of length 8 or 11 representing a valid german BIC."
        },
        {
          "code": 16016,
          "field": "payment.accountHolder",
          "message": "Bad value for payment.accountHolder. Expected: string of length between 4 and 128."
        }
      ]
    },
    "SettlementsPatchErrors": {
      "title": "Error",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      },
      "example": [
        {
          "code": 50001,
          "message": "A Settlement with specified id can not be found. Expected: A valid string identifier representing a Settlement object between 1 and 255 characters."
        }
      ]
    }
  }
}